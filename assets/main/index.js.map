{"version":3,"sources":["assets/Script/Match/MapObject/Bullet.ts","assets/Script/Match/Obstacle/Bush.ts","assets/Script/Utils/EventHandler.ts","assets/Script/Game/GameConstants.ts","assets/Script/Utils/GameEventType.ts","assets/Script/Game/GameManager.ts","assets/Script/Game/HomeScene.ts","assets/Script/Initializer.ts","assets/Script/Utils/LocalStorageKeys.ts","assets/Script/Match/Logic/MatchManager.ts","assets/Script/Match/Logic/MatchNetwork.ts","assets/Script/Match/MatchScene.ts","assets/Script/Match/MiniMap.ts","assets/Script/Nakama/MultiplayerManager.ts","assets/Script/Nakama/MultiplayerMessage.ts","assets/Script/Nakama/NakamaAutoLogin.ts","assets/Script/Nakama/NakamaConnectionData.ts","assets/Script/Nakama/NakamaManager.ts","assets/Script/Match/Obstacle/Obstacle.ts","assets/Script/Nakama/OperationCode.ts","assets/Script/Utils/PersistNode.ts","assets/Script/Match/Logic/PlayerData.ts","assets/Script/Match/Logic/PlayerLogic.ts","assets/Script/Match/Player.ts","assets/Script/Utils/RPCs.ts","assets/Script/General/SceneChanger.ts","assets/Script/Game/UserInfo.ts"],"names":["_a","cc","_decorator","ccclass","property","Bullet","_super","__extends","_this","apply","this","arguments","trail","vx","vy","vel","damage","isHit","prototype","setPosition","x","y","node","setAngle","angle","Math","cos","PI","tan","start","fire","active","scaleX","stopAllActions","tween","to","union","hit","call","isAvailable","updateFly","dt","__decorate","Sprite","Component","exports","default","Obstacle_1","require","Bush","root","leaf","onLoad","r","width","checkCollisionCircle","d2","checkCollisionPoint","EventHandler","eventTarget","EventTarget","on","event","callback","off","dispatchEvent","data","Event","eventCustom","EventCustom","setUserData","eventHandler","PlayerColor","body","color","fromHEX","hand","back","MapConfig","numObs","obsPos","height","mapScale","Config","IS_ONLINE","GameEventType","MultiplayerManager_1","EventHandler_1","SceneChanger_1","MatchManager_1","UserInfo_1","NakamaManager_1","GameManager","VictoriesRequiredToWin","playersWins","winner","userInfo","UserInfo","init","instance","OnLoginSuccess","session","user_id","OnMatchJoin","joinedMatch","bind","OnMatchLeave","leavedMatch","onDestroy","log","resetPlayerWins","goToLobby","goToHome","Array","loadHomeScene","MatchManager","getInstance","newMatch","GameConstants_1","HomeScene","buttonPlayNow","avatar","playerName","playerLevel","onPlayNow","string","joinMatchAsync","sent","Button","Label","GameManager_1","NakamaAutoLogin_1","Initializer","LocalStorageKeys","DeviceId","MatchScene_1","MatchNetwork_1","OperationCode_1","PlayerLogic_1","matchScene","network","playerLogicsMap","Map","mainPlayerLogic","PlayerLogic","loadMatchScene","MatchNetwork","subscribeListener","setScene","scene","inMatch","onReceiveNewPlayerJoin","pk","userID","createNewPlayer","id","playerLogic","set","newPlayerJoin","getPlayerLogic","has","get","getMainPlayerLogic","sendUpdatePlayerPos","userId","send","Code","PlayerPosition","onReceivePlayerUpdatePos","updatePlayerPos","setRotation","updateMainPlayerPos","updateMyPlayerPos","sendFire","BulletFire","onReceiveFire","onFire","sendPlayerEquip","isEquip","PlayerEquip","onReceivePlayerEquip","updatePlayerEquip","setEquip","onPlayerEquip","onReceiveDied","onDied","onMainPlayerDied","mgr","socket","onmatchdata","matchData","onReceivePacket","op_code","code","PlayerJoined","Player_1","Bullet_1","MiniMap_1","MatchScene","isUp","isDown","isLeft","isRight","bushPrefab","playerPrefab","bulletPrefab","map","mapGrid","camera","hud","miniMapNode","myHpProgress","mainPlayerNode","mainPlayer","playersMap","bullets","obstacles","miniMap","drawMapGrid","ctx","getComponent","Graphics","rect","stroke","genObstacles","playerPosInValid","randX","randY","random","_i","length","obs","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","Node","MOUSE_MOVE","onMouseMove","MOUSE_DOWN","onClick","MOUSE_WHEEL","onScroll","keyCode","macro","KEY","a","s","d","w","f","toggleMainPlayerEquip","t","dx","getLocationX","dy","getLocationY","atan","getButton","EventMouse","BUTTON_LEFT","getScrollY","zoomIn","zoomOut","scale","zIndex","moveTo","lineTo","i","instantiate","addChild","push","getBullet","bullet_1","bullet","player","toggleEquipGun","setEquipGun","died","delete","update","moveMainPlayer","forEach","e","checkHitPlayer","checkHitObstacle","newX","newY","progress","getHpRatio","Prefab","Layout","ProgressBar","MiniMap","bg","grid","playerColor","fillColor","strokeColor","circle","fill","lineWidth","RPCs_1","MultiplayerManager","tickRate","sendRate","logFormat","enableLog","match","self","isOnMatch","interval","setInterval","localTickPassed","OnLocalTick","OnDisconnected","disconnected","sendRPC","JoinOrCreateMatchRpc","rpcResult","_b","JSON","stringify","result","payload","matchId","joinMatch","leaveMatchAsync","leaveMatch","match_id","SendingDataLog","sendMatchState","receive","newState","encoder","TextEncoder","json","encode","State","ReceivedDataLog","OpCode","MultiplayerMessage","bytes","matchState","dataCode","opCode","UserPresence","userPresence","sessionId","username","toString","getData","getBytes","NakamaAutoLogin","retryTime","OnLoginFail","loginFailed","tryLogin","loginWithDeviceId","setTimeout","__awaiter","NakamaConnectionData","host","port","serverKey","nakama_js_1","uuid_1","NakamaConnectionData_1","LocalStorageKeys_1","NakamaManager","connectionData","client","isLoggedIn","onApplicationQuit","disconnect","loginWithUdid","Client","deviceId","sys","localStorage","getItem","v4","setItem","loginAsync","authenticateDevice","loginWithCustomId","customId","authenticateCustom","sessionTask","OnConnecting","then","createSocket","connect","catch","exception","error","logOut","connected","OnConnected","rpc","Promise","Obstacle","PersistNode","game","addPersistRootNode","PlayerData","colorId","maxHp","maxBullets","undefined","hp","loadBullet","nBullets","takeDamage","heal","setHp","isDead","PlayerData_1","getId","bool","Player","leftHand","rightHand","backPack","gun","bodyColor","handColor","backColor","genPlayer","equipGun","unEquipGun","director","getScene","getChildByName","fight","removeFromParent","RPCs","SceneChanger","loadScene","loadLobbyScene"],"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","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Bullet extends cc.Component {\r\n\r\n    @property(cc.Sprite)\r\n    trail: cc.Sprite = null;\r\n\r\n    private vx: number = null;\r\n    private vy: number = null;\r\n\r\n    private vel: number = 2000;\r\n\r\n    public damage: number = 10;\r\n\r\n    public isHit: boolean = false;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    setPosition (x: number, y?: number) {\r\n        this.node.setPosition(x, y);\r\n    }\r\n\r\n    setAngle (angle) {\r\n        this.trail.node.angle = angle + 90;\r\n        this.vy = Math.cos(angle * Math.PI/180) * this.vel;\r\n        this.vx = -Math.tan(angle * Math.PI/180) * this.vy;\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    fire () {\r\n        this.node.active = true;\r\n        this.trail.node.active = true;\r\n        this.isHit = false;\r\n        this.trail.node.scaleX = 0;\r\n        this.trail.node.stopAllActions();\r\n        cc.tween(this.trail.node)\r\n            .to(0.07, {scaleX: 1})\r\n            .union()\r\n            .start()\r\n    }\r\n\r\n    hit () {\r\n        //TODO: anim hit\r\n        this.isHit = true;\r\n        this.trail.node.stopAllActions();\r\n        cc.tween(this.trail.node)\r\n            .to(0.05, {scaleX: 0})\r\n            .call(() => {\r\n                this.node.active = false;\r\n                this.trail.node.active = false;\r\n            })\r\n            .union()\r\n            .start()\r\n    }\r\n\r\n    isAvailable () {\r\n        return !this.node.active;\r\n    }\r\n\r\n    updateFly (dt) {\r\n        this.node.x += this.vx*dt;\r\n        this.node.y += this.vy*dt;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport Obstacle from \"./Obstacle\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Bush extends Obstacle {\r\n\r\n    @property(cc.Sprite)\r\n    root: cc.Sprite = null;\r\n\r\n    @property(cc.Sprite)\r\n    leaf: cc.Sprite = null;\r\n\r\n    onLoad () {\r\n        this.r = this.root.node.width/2;\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    checkCollisionCircle (r: number, x:number, y: number): boolean {\r\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\r\n        return d2 <= r*r + this.r*this.r + 2*r*this.r;\r\n    }\r\n\r\n    checkCollisionPoint (x:number, y: number): boolean {\r\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\r\n        return d2 <= this.r*this.r;\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","class EventHandler {\r\n  private readonly eventTarget: cc.EventTarget = new cc.EventTarget();\r\n\r\n  on(event: string, callback: (...params) => void) {\r\n    this.eventTarget.on(event, callback);\r\n  }\r\n\r\n  off(event: string, callback: (...params) => void) {\r\n    this.eventTarget.off(event, callback);\r\n  }\r\n\r\n  dispatchEvent(event: string | cc.Event, data?: any) {\r\n    if (event instanceof cc.Event) this.eventTarget.dispatchEvent(event);\r\n    else {\r\n      const eventCustom = new cc.Event.EventCustom(event, true);\r\n      eventCustom.setUserData(data);\r\n      this.eventTarget.dispatchEvent(eventCustom);\r\n    }\r\n  }\r\n}\r\n\r\nexport var eventHandler = new EventHandler();\r\n","export class PlayerColor {\r\n    static body : cc.Color[] = [\r\n        cc.color().fromHEX(\"#f8c574\"),\r\n        cc.color().fromHEX(\"#c40000\"),\r\n        cc.color().fromHEX(\"#bc002d\"),\r\n        cc.color().fromHEX(\"#1b400c\"),\r\n        cc.color().fromHEX(\"#990000\"),\r\n    ]\r\n    static hand : cc.Color[] = [\r\n        cc.color().fromHEX(\"#f8c574\"),\r\n        cc.color().fromHEX(\"#16b900\"),\r\n        cc.color().fromHEX(\"#FFFFFF\"),\r\n        cc.color().fromHEX(\"#b5c58b\"),\r\n        cc.color().fromHEX(\"#4c1111\"),\r\n    ]\r\n    static back : cc.Color[] = [\r\n        cc.color().fromHEX(\"#816537\"),\r\n        cc.color().fromHEX(\"#059300\"),\r\n        cc.color().fromHEX(\"#c0a73f\"),\r\n        cc.color().fromHEX(\"#ab7c29\"),\r\n        cc.color().fromHEX(\"#ffcc00\"),\r\n    ]\r\n}\r\n\r\nexport class MapConfig {\r\n    static numObs: number = 10;\r\n    static obsPos = [\r\n        {x: -100, y: 200},\r\n        {x: -132, y: 2019},\r\n        {x: 441, y: 15},\r\n        {x: 607, y: -333},\r\n        {x: 115, y: -231},\r\n        {x: 19, y: 449},\r\n        {x: 1004, y: -876},\r\n        {x: -2107, y: 1613},\r\n        {x: -999, y: 1},\r\n        {x: -12, y: 1313}\r\n    ]\r\n    static width: number = 3000;\r\n    static height: number = 2500;\r\n    static mapScale: number = 1/10;\r\n}\r\n\r\nexport class Config {\r\n    public static IS_ONLINE = true;\r\n}\r\n","enum GameEventType {\r\n    CONNECTING = \"connecting\",\r\n    CONNECTED = \"connected\",\r\n    DISCONNECTED = \"disconnected\",\r\n    LOGIN_SUCCESS = \"login_success\",\r\n    LOGIN_FAIL = \"login_fail\",\r\n}\r\n","import { Client } from \"@heroiclabs/nakama-js\";\r\nimport { RpcResponse } from \"@heroiclabs/nakama-js/client\";\r\nimport MultiplayerManager from \"../Nakama/MultiplayerManager\";\r\nimport { eventHandler } from \"../Utils/EventHandler\";\r\nimport SceneChanger from \"../General/SceneChanger\";\r\nimport {MatchManager} from \"../Match/Logic/MatchManager\";\r\nimport {UserInfo} from \"./UserInfo\";\r\nimport NakamaManager from \"../Nakama/NakamaManager\";\r\n\r\nexport default class GameManager {\r\n  public readonly VictoriesRequiredToWin = 3;\r\n\r\n  public static instance: GameManager = null;\r\n  public playersWins: number[] = [];\r\n  public winner?: number = 0;\r\n\r\n  public userInfo = new UserInfo();\r\n\r\n  static init() {\r\n    GameManager.instance = new GameManager();\r\n\r\n    eventHandler.on(\r\n        NakamaManager.OnLoginSuccess,\r\n        () => {GameManager.instance.userInfo = new UserInfo(NakamaManager.instance.session.user_id);}\r\n    );\r\n\r\n    // MultiplayerManager.instance.Subscribe(MultiplayerManager.Code.PlayerWon, ReceivedPlayerWonRound);\r\n    // MultiplayerManager.Instance.Subscribe(MultiplayerManager.Code.Draw, ReceivedDrawRound);\r\n    // MultiplayerManager.Instance.Subscribe(MultiplayerManager.Code.ChangeScene, ReceivedChangeScene);\r\n    eventHandler.on(\r\n        MultiplayerManager.OnMatchJoin,\r\n        GameManager.instance.joinedMatch.bind(GameManager.instance)\r\n    );\r\n    eventHandler.on(\r\n        MultiplayerManager.OnMatchLeave,\r\n        GameManager.instance.leavedMatch.bind(GameManager.instance)\r\n    );\r\n  }\r\n\r\n  onDestroy(): void {\r\n    // {\r\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.PlayerWon, ReceivedPlayerWonRound);\r\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.Draw, ReceivedDrawRound);\r\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.PlayerInput, ReceivedChangeScene);\r\n    //     MultiplayerManager.Instance.onMatchJoin -= JoinedMatch;\r\n    //     MultiplayerManager.Instance.onMatchLeave -= LeavedMatch;\r\n  }\r\n\r\n  // receivedPlayerWonRound(message: MultiplayerMessage) {\r\n  //   // PlayerWonData playerWonData = message.GetData<PlayerWonData>();\r\n  //   // PlayersWins[playerWonData.PlayerNumber]++;\r\n  //   // Winner = playerWonData.PlayerNumber;\r\n  // }\r\n  //\r\n  // receivedDrawRound(message: MultiplayerMessage) {\r\n  //   this.winner = null;\r\n  // }\r\n  //\r\n  // receivedChangeScene(message: MultiplayerMessage) {\r\n  //   // SceneManager.LoadScene(message.GetData<int>());\r\n  // }\r\n\r\n  joinedMatch() {\r\n    cc.log(\"GameManager\", this);\r\n    cc.log(\"instance\", GameManager.instance);\r\n    this.resetPlayerWins();\r\n    this.goToLobby();\r\n  }\r\n\r\n  leavedMatch() {\r\n    this.goToHome();\r\n  }\r\n\r\n  resetPlayerWins() {\r\n    cc.log(\"ResetPlayerWins\");\r\n    this.playersWins = new Array(4);\r\n  }\r\n\r\n  goToHome() {\r\n    SceneChanger.instance.loadHomeScene();\r\n  }\r\n\r\n  goToLobby() {\r\n    MatchManager.getInstance().newMatch();\r\n  }\r\n}\r\n","import {MatchManager} from \"../Match/Logic/MatchManager\";\r\nimport MultiplayerManager from \"../Nakama/MultiplayerManager\";\r\nimport {Config} from \"./GameConstants\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class HomeScene extends cc.Component {\r\n  @property(cc.Button)\r\n  buttonPlayNow: cc.Button = null;\r\n  @property(cc.Sprite)\r\n  avatar: cc.Sprite = null;\r\n  @property(cc.Label)\r\n  playerName: cc.Label = null;\r\n  @property(cc.Label)\r\n  playerLevel: cc.Label = null;\r\n\r\n  start() {\r\n    // init logic\r\n    this.buttonPlayNow.node.on(\"click\", this.onPlayNow, this);\r\n\r\n    this.playerName.string = \"Tien No Mo Non\";\r\n    this.playerLevel.string = \"10\";\r\n\r\n    // cc.resources.load(\r\n    //   \"avatar\",\r\n    //   cc.Texture2D,\r\n    //   (err: any, texture: cc.Texture2D) => {\r\n    //     let spriteFrame = new cc.SpriteFrame();\r\n    //     spriteFrame.setTexture(texture);\r\n    //     this.avatar.spriteFrame = spriteFrame;\r\n    //   }\r\n    // );\r\n  }\r\n\r\n  async onPlayNow() {\r\n    if (Config.IS_ONLINE) await MultiplayerManager.instance.joinMatchAsync();\r\n    else {\r\n      MatchManager.getInstance().newMatch();\r\n    }\r\n  }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SceneChanger from \"./General/SceneChanger\";\r\nimport NakamaManager from \"./Nakama/NakamaManager\";\r\nimport MultiplayerManager from \"./Nakama/MultiplayerManager\";\r\nimport GameManager from \"./Game/GameManager\";\r\nimport NakamaAutoLogin from \"./Nakama/NakamaAutoLogin\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Initializer extends cc.Component {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n        SceneChanger.init();\r\n        NakamaManager.init();\r\n        MultiplayerManager.init();\r\n        GameManager.init();\r\n        NakamaAutoLogin.init();\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","export default class LocalStorageKeys {\r\n  static readonly DeviceId = \"DeviceId\";\r\n}\r\n","import MatchScene from \"../MatchScene\";\r\nimport {BulletFire, NewPlayerJoin, PlayerEquip, PlayerPosition} from \"../../Nakama/RPCData\";\r\nimport {MatchNetwork} from \"./MatchNetwork\";\r\nimport {Code} from \"../../Nakama/OperationCode\";\r\nimport SceneChanger from \"../../General/SceneChanger\";\r\nimport {PlayerLogic} from \"./PlayerLogic\";\r\nimport GameManager from \"../../Game/GameManager\";\r\n\r\nexport class MatchManager {\r\n    private static instance: MatchManager;\r\n\r\n    public static getInstance () {\r\n        if (!this.instance) this.instance = new MatchManager();\r\n        return this.instance;\r\n    }\r\n\r\n    private matchScene: MatchScene = null;\r\n    private network: MatchNetwork = null;\r\n\r\n    private mainPlayerLogic: PlayerLogic;\r\n    private playerLogicsMap: Map<string, PlayerLogic>;\r\n\r\n    newMatch () {\r\n        this.playerLogicsMap = new Map<string, PlayerLogic>();\r\n        this.mainPlayerLogic = new PlayerLogic();\r\n\r\n        SceneChanger.instance.loadMatchScene();\r\n        this.network = new MatchNetwork(this);\r\n        this.network.subscribeListener();\r\n    }\r\n\r\n    setScene (scene: MatchScene) {\r\n        this.matchScene = scene;\r\n    }\r\n\r\n    inMatch () {\r\n        return this.matchScene instanceof MatchScene;\r\n    }\r\n\r\n    onReceiveNewPlayerJoin (pk: NewPlayerJoin) {\r\n        cc.log(\"NEW PLAYER JOIN, ID: \", pk.userID);\r\n        this.createNewPlayer(pk.userID);\r\n    }\r\n\r\n    createNewPlayer (id: string) {\r\n        let playerLogic = new PlayerLogic(id);\r\n        this.playerLogicsMap.set(id, playerLogic);\r\n        this.matchScene.newPlayerJoin(id);\r\n    }\r\n\r\n    getPlayerLogic (id: string) {\r\n        if (!this.playerLogicsMap.has(id)) return null;\r\n        return this.playerLogicsMap.get(id);\r\n    }\r\n\r\n    getMainPlayerLogic () {\r\n        return this.mainPlayerLogic;\r\n    }\r\n\r\n    sendUpdatePlayerPos (x: number, y: number, angle: number) {\r\n        let data: PlayerPosition = {\r\n            x: x,\r\n            y: y,\r\n            angle: angle,\r\n            userID: GameManager.instance.userInfo.userId\r\n        }\r\n        this.network.send(Code.PlayerPosition, data);\r\n    }\r\n\r\n    onReceivePlayerUpdatePos (pk: PlayerPosition) {\r\n        if (pk.userID === GameManager.instance.userInfo.userId) return;\r\n        else {\r\n            this.updatePlayerPos(pk.userID, pk.x, pk.y, pk.angle);\r\n        }\r\n    }\r\n\r\n    updatePlayerPos (id: string, x: number, y: number, angle: number) {\r\n        if (!this.playerLogicsMap.has(id)) {\r\n            this.createNewPlayer(id);\r\n        }\r\n        let playerLogic = this.playerLogicsMap.get(id);\r\n        playerLogic.setPosition(x, y);\r\n        playerLogic.setRotation(angle);\r\n        this.matchScene.updatePlayerPos(id, x, y, angle);\r\n    }\r\n\r\n    updateMainPlayerPos (x: number, y: number, angle: number) {\r\n        this.mainPlayerLogic.setPosition(x, y);\r\n        this.mainPlayerLogic.setRotation(angle);\r\n        this.matchScene.updateMyPlayerPos( x, y);\r\n    }\r\n\r\n    sendFire (x: number, y: number, angle: number) {\r\n        let data: BulletFire = {\r\n            x: x,\r\n            y: y,\r\n            angle: angle,\r\n            userID: GameManager.instance.userInfo.userId\r\n        }\r\n        this.network.send(Code.BulletFire, data);\r\n    }\r\n\r\n    onReceiveFire (pk: BulletFire) {\r\n        if (pk.userID !== GameManager.instance.userInfo.userId) this.matchScene.onFire(pk.x, pk.y, pk.angle);\r\n    }\r\n\r\n    sendPlayerEquip (isEquip: boolean) {\r\n        let data: PlayerEquip = {\r\n            isEquip: isEquip,\r\n            userID: GameManager.instance.userInfo.userId\r\n        }\r\n        this.network.send(Code.PlayerEquip, data);\r\n    }\r\n\r\n    onReceivePlayerEquip (pk: PlayerEquip) {\r\n        if (pk.userID !== GameManager.instance.userInfo.userId) {\r\n            this.updatePlayerEquip(pk.userID, pk.isEquip);\r\n        }\r\n    }\r\n\r\n    updatePlayerEquip (id: string, isEquip: boolean) {\r\n        if (!this.playerLogicsMap.has(id)) {\r\n            this.createNewPlayer(id);\r\n        }\r\n        this.playerLogicsMap.get(id).setEquip(isEquip);\r\n        this.matchScene.onPlayerEquip(id, isEquip);\r\n    }\r\n\r\n    onReceiveDied (userId: string) {\r\n        if (userId !== GameManager.instance.userInfo.userId) this.matchScene.onDied(userId);\r\n        else {\r\n            // main player died, end match\r\n            this.matchScene.onMainPlayerDied();\r\n        }\r\n    }\r\n}","import NakamaManager from \"../../Nakama/NakamaManager\";\r\nimport MultiplayerManager from \"../../Nakama/MultiplayerManager\";\r\nimport {MatchManager} from \"./MatchManager\";\r\nimport {Code} from \"../../Nakama/OperationCode\";\r\nimport {Config} from \"../../Game/GameConstants\";\r\n\r\nexport class MatchNetwork {\r\n\r\n    private mgr: MatchManager = null;\r\n\r\n    constructor(mgr) {\r\n        this.mgr = mgr;\r\n    }\r\n\r\n    subscribeListener () {\r\n        if (!Config.IS_ONLINE) return;\r\n        NakamaManager.instance.socket.onmatchdata = (matchData) => {\r\n            // cc.log(\"MatchData:\", matchData);\r\n            this.onReceivePacket(matchData.op_code, matchData.data);\r\n        };\r\n    }\r\n\r\n    onReceivePacket (code: Code, data: any) {\r\n        if (!this.mgr.inMatch()) return;\r\n        switch (code) {\r\n            case Code.PlayerJoined: {\r\n                this.mgr.onReceiveNewPlayerJoin(data);\r\n                break;\r\n            }\r\n            case Code.PlayerPosition: {\r\n                this.mgr.onReceivePlayerUpdatePos(data);\r\n                break;\r\n            }\r\n            case Code.PlayerEquip: {\r\n                this.mgr.onReceivePlayerEquip(data);\r\n                break;\r\n            }\r\n            case Code.BulletFire: {\r\n                this.mgr.onReceiveFire(data);\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    async send (code: Code, data: object | []) {\r\n        if (!Config.IS_ONLINE) return;\r\n        await MultiplayerManager.instance.send(code, data);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport Obstacle from \"./Obstacle/Obstacle\";\r\nimport Player from \"./Player\";\r\nimport Bullet from \"./MapObject/Bullet\";\r\nimport {MatchManager} from \"./Logic/MatchManager\";\r\nimport {MapConfig} from \"../Game/GameConstants\";\r\nimport MiniMap from \"./MiniMap\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MatchScene extends cc.Component {\r\n\r\n    private isUp: boolean = false;\r\n    private isDown: boolean = false;\r\n    private isLeft: boolean = false;\r\n    private isRight: boolean = false;\r\n\r\n    @property\r\n    vel: number = 200;\r\n\r\n    @property(cc.Prefab)\r\n    private bushPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    private playerPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Prefab)\r\n    bulletPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Node)\r\n    map: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    mapGrid: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    camera: cc.Node = null;\r\n\r\n    @property(cc.Layout)\r\n    hud: cc.Layout = null;\r\n\r\n    @property(cc.Node)\r\n    miniMapNode: cc.Node = null;\r\n\r\n    @property(cc.ProgressBar)\r\n    myHpProgress: cc.ProgressBar = null;\r\n\r\n    @property(cc.Node)\r\n    mainPlayerNode: cc.Node = null;\r\n\r\n    private mainPlayer: Player = null;\r\n\r\n    private playersMap: Map<string, Player> = new Map<string, Player>();\r\n\r\n    private bullets: Bullet[] = [];\r\n\r\n    private obstacles : Obstacle[] = [];\r\n\r\n    private miniMap: MiniMap = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.map.width = MapConfig.width;\r\n        this.map.height = MapConfig.height;\r\n\r\n        this.drawMapGrid();\r\n\r\n        let ctx = this.hud.getComponent(cc.Graphics);\r\n        ctx.rect(this.miniMapNode.x - this.miniMapNode.width/2, this.miniMapNode.y - this.miniMapNode.height/2, this.miniMapNode.width, this.miniMapNode.height);\r\n        ctx.stroke();\r\n\r\n        this.mainPlayer = this.mainPlayerNode.getComponent(Player);\r\n\r\n        this.genObstacles();\r\n\r\n        this.miniMap = this.miniMapNode.getComponent(MiniMap);\r\n        this.miniMap.init(this.bushPrefab);\r\n    }\r\n\r\n    start () {\r\n        MatchManager.getInstance().setScene(this);\r\n\r\n        let playerPosInValid = false, randX, randY;\r\n        do {\r\n            playerPosInValid = false;\r\n            randX = (Math.random() - 0.5) * this.map.width;\r\n            randY = (Math.random() - 0.5) * this.map.height;\r\n            for (let obs of this.obstacles) {\r\n                if (obs.checkCollisionCircle(28, randX, randY)) playerPosInValid = true;\r\n            }\r\n        } while (playerPosInValid)\r\n\r\n        MatchManager.getInstance().updateMainPlayerPos(randX, randY, 0);\r\n        // this.mainPlayerNode.setPosition(randX, randY);\r\n\r\n        MatchManager.getInstance().sendUpdatePlayerPos(this.mainPlayerNode.x, this.mainPlayerNode.y, this.mainPlayerNode.angle);\r\n\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        this.camera.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        this.camera.on(cc.Node.EventType.MOUSE_DOWN, this.onClick, this);\r\n        this.camera.on(cc.Node.EventType.MOUSE_WHEEL, this.onScroll, this);\r\n    }\r\n\r\n    onKeyDown (event) {\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.isLeft = true;\r\n                break;\r\n            case cc.macro.KEY.s:\r\n                this.isDown = true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.isRight = true;\r\n                break;\r\n            case cc.macro.KEY.w:\r\n                this.isUp = true;\r\n                break;\r\n            case cc.macro.KEY.f:\r\n                this.toggleMainPlayerEquip();\r\n                MatchManager.getInstance().sendPlayerEquip(this.mainPlayer.isEquip);\r\n                break;\r\n            case cc.macro.KEY.t:\r\n                MatchManager.getInstance().createNewPlayer(\"123\");\r\n        }\r\n    }\r\n\r\n    onKeyUp (event) {\r\n        switch (event.keyCode) {\r\n            case cc.macro.KEY.a:\r\n                this.isLeft = false;\r\n                break;\r\n            case cc.macro.KEY.s:\r\n                this.isDown = false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.isRight = false;\r\n                break;\r\n            case cc.macro.KEY.w:\r\n                this.isUp = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    onMouseMove (event) {\r\n        let dx = event.getLocationX() - this.camera.width/2;\r\n        let dy = event.getLocationY() - this.camera.height/2;\r\n        let angle = Math.atan(-dx/dy) * 180 / Math.PI;\r\n        if (dy < 0) angle = 180 + angle;\r\n        this.mainPlayerNode.angle = angle;\r\n    }\r\n\r\n    onClick (event) {\r\n        switch (event.getButton()) {\r\n            case cc.Event.EventMouse.BUTTON_LEFT:\r\n                this.mainPlayer.fire();\r\n                break;\r\n        }\r\n    }\r\n\r\n    onScroll (event) {\r\n        if (event.getScrollY() > 0) {\r\n            this.zoomIn();\r\n        }\r\n        else {\r\n            this.zoomOut();\r\n        }\r\n    }\r\n\r\n    zoomOut () {\r\n        if (this.map.scale < 1/8) return;\r\n        this.map.scale /= 2;\r\n    }\r\n\r\n    zoomIn () {\r\n        if (this.map.scale >= 1) return;\r\n        this.map.scale *= 2;\r\n    }\r\n\r\n    drawMapGrid () {\r\n        this.mapGrid.zIndex = -2;\r\n        let ctx = this.mapGrid.getComponent(cc.Graphics);\r\n        let start = -MapConfig.width/2;\r\n        while (start < MapConfig.width/2) {\r\n            start += 250;\r\n            ctx.moveTo(start, -MapConfig.height/2);\r\n            ctx.lineTo(start, MapConfig.height/2);\r\n            ctx.stroke();\r\n        }\r\n        start = -MapConfig.height/2;\r\n        while (start < MapConfig.height/2) {\r\n            start += 250;\r\n            ctx.moveTo(-MapConfig.width/2, start);\r\n            ctx.lineTo(MapConfig.width/2, start);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    genObstacles () {\r\n        for (let i = 0; i < MapConfig.numObs; i++) {\r\n            let node = cc.instantiate(this.bushPrefab);\r\n            this.map.addChild(node);\r\n            this.obstacles.push(node.getComponent(Obstacle));\r\n\r\n            node.setPosition(MapConfig.obsPos[i].x, MapConfig.obsPos[i].y);\r\n        }\r\n    }\r\n\r\n    getBullet () {\r\n        for (let bullet of this.bullets) {\r\n            if (bullet.isAvailable()) return bullet;\r\n        }\r\n\r\n        let node = cc.instantiate(this.bulletPrefab);\r\n        this.map.addChild(node, -1);\r\n        let bullet = node.getComponent(Bullet);\r\n        this.bullets.push(bullet);\r\n\r\n        return bullet;\r\n    }\r\n\r\n    newPlayerJoin (id: string) {\r\n        if (this.playersMap.has(id)) return;\r\n        cc.log(\"Create new player, id:\", id);\r\n        let player = cc.instantiate(this.playerPrefab);\r\n        this.map.addChild(player);\r\n        this.playersMap.set(id, player.getComponent(Player));\r\n    }\r\n\r\n    updateMyPlayerPos (x: number, y: number) {\r\n        this.mainPlayerNode.setPosition(x, y);\r\n\r\n        this.miniMap.updateMyPlayerPos(x, y);\r\n    }\r\n\r\n    updatePlayerPos (id: string, x: number, y: number, angle: number) {\r\n        if (!this.playersMap.has(id)) {\r\n            MatchManager.getInstance().createNewPlayer(id);\r\n        }\r\n        this.playersMap.get(id).node.setPosition(x, y);\r\n        this.playersMap.get(id).node.angle = angle;\r\n    }\r\n\r\n    onFire (x: number, y: number, angle: number) {\r\n        let bullet = this.getBullet();\r\n        bullet.setPosition(x, y);\r\n        bullet.setAngle(angle);\r\n        bullet.fire();\r\n    }\r\n\r\n    toggleMainPlayerEquip () {\r\n        this.mainPlayer.toggleEquipGun();\r\n    }\r\n\r\n    onPlayerEquip (id: string, isEquip: boolean) {\r\n        if (!this.playersMap.has(id)) {\r\n            MatchManager.getInstance().createNewPlayer(id);\r\n        }\r\n        this.playersMap.get(id).setEquipGun(isEquip);\r\n    }\r\n\r\n    onMainPlayerDied () {\r\n        //TODO: anim main player died, end match\r\n        this.mainPlayer.died();\r\n    }\r\n\r\n    onDied (id: string) {\r\n        if (!this.playersMap.has(id)) return;\r\n        this.playersMap.get(id).died();\r\n        this.playersMap.delete(id);\r\n    }\r\n\r\n    update (dt) {\r\n        this.moveMainPlayer(dt);\r\n\r\n        // bullets \"fly\"\r\n        this.bullets.forEach(e => {\r\n            if (!e.isHit) {\r\n                e.updateFly(dt);\r\n                this.checkHitPlayer(e);\r\n                this.checkHitObstacle(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    moveMainPlayer (dt) {\r\n        let newX = this.mainPlayerNode.x, newY = this.mainPlayerNode.y;\r\n        if (this.isLeft && this.isUp) {\r\n            newX -= this.vel/1.4 * dt;\r\n            newY += this.vel/1.4 * dt;\r\n        }\r\n        else if (this.isLeft && this.isDown) {\r\n            newX -= this.vel/1.4 * dt;\r\n            newY -= this.vel/1.4 * dt;\r\n        }\r\n        else if (this.isRight && this.isUp) {\r\n            newX += this.vel/1.4 * dt;\r\n            newY += this.vel/1.4 * dt;\r\n        }\r\n        else if (this.isRight && this.isDown) {\r\n            newX += this.vel/1.4 * dt;\r\n            newY -= this.vel/1.4 * dt;\r\n        }\r\n        else if (this.isLeft && this.isRight) {}\r\n        else if (this.isUp && this.isDown) {}\r\n        else if (this.isLeft) newX -= this.vel * dt;\r\n        else if (this.isRight) newX += this.vel * dt;\r\n        else if (this.isUp) newY += this.vel * dt;\r\n        else if (this.isDown) newY -= this.vel * dt;\r\n\r\n        for (let obs of this.obstacles) {\r\n            if (obs.checkCollisionCircle(28, newX, newY)) {\r\n                if (!obs.checkCollisionCircle(28, this.mainPlayerNode.x, newY)) {\r\n                    newX = this.mainPlayerNode.x;\r\n                }\r\n                else if (!obs.checkCollisionCircle(28, newX, this.mainPlayerNode.y)) {\r\n                    newY = this.mainPlayerNode.y;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        MatchManager.getInstance().sendUpdatePlayerPos(newX, newY, this.mainPlayerNode.angle);\r\n        MatchManager.getInstance().updateMainPlayerPos(newX, newY, this.mainPlayerNode.angle);\r\n\r\n        // move camera following player\r\n        this.camera.x = this.mainPlayerNode.x;\r\n        this.camera.y = this.mainPlayerNode.y;\r\n        this.hud.node.x = this.mainPlayerNode.x;\r\n        this.hud.node.y = this.mainPlayerNode.y;\r\n    }\r\n\r\n    checkHitPlayer (bullet: Bullet): boolean {\r\n        if (this.mainPlayer.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\r\n            this.mainPlayer.hit(bullet.damage);\r\n            this.myHpProgress.progress = this.mainPlayer.getHpRatio();\r\n            bullet.hit();\r\n            return true;\r\n        }\r\n        this.playersMap.forEach(e => {\r\n            if (e.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\r\n                e.hit(bullet.damage);\r\n                bullet.hit();\r\n                return true;\r\n            }\r\n        })\r\n        return false;\r\n    }\r\n\r\n    checkHitObstacle (bullet: Bullet): boolean {\r\n        this.obstacles.forEach(e => {\r\n            if (e.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\r\n                e.hit();\r\n                bullet.hit();\r\n                return true;\r\n            }\r\n        })\r\n        return false;\r\n    }\r\n\r\n    onDestroy () {\r\n        // Cancel keyboard input monitoring\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\r\n        this.camera.off(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\r\n        this.camera.off(cc.Node.EventType.MOUSE_DOWN, this.onClick, this);\r\n        this.camera.off(cc.Node.EventType.MOUSE_WHEEL, this.onScroll, this);\r\n    }\r\n}\r\n","import {MapConfig, PlayerColor} from \"../Game/GameConstants\";\r\nimport Obstacle from \"./Obstacle/Obstacle\";\r\nimport Player from \"./Player\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MiniMap extends cc.Component {\r\n    @property(cc.Sprite)\r\n    bg: cc.Sprite = null;\r\n\r\n    @property(cc.Node)\r\n    grid: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    mainPlayer: cc.Node = null;\r\n\r\n    private bushPrefab: cc.Prefab;\r\n\r\n    private playerColor: cc.Color = PlayerColor.body[0];\r\n\r\n    private obstacles : Obstacle[] = [];\r\n\r\n    onLoad () {\r\n        this.bg.node.width = MapConfig.width;\r\n        this.bg.node.height = MapConfig.height;\r\n        this.bg.node.scale = MapConfig.mapScale;\r\n    }\r\n\r\n    init (bushPrefab) {\r\n        this.drawMapGrid();\r\n\r\n        this.bushPrefab = bushPrefab;\r\n\r\n        this.genObstacles();\r\n\r\n        let ctx = this.mainPlayer.getComponent(cc.Graphics);\r\n        ctx.fillColor = this.playerColor;\r\n        ctx.strokeColor = this.playerColor;\r\n        ctx.circle(0, 0, 28);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n        this.mainPlayer.scale = MapConfig.mapScale * 2;\r\n    }\r\n\r\n    drawMapGrid () {\r\n        let ctx = this.grid.getComponent(cc.Graphics);\r\n        ctx.lineWidth /= MapConfig.mapScale;\r\n        let start = -MapConfig.width/2;\r\n        while (start < MapConfig.width/2) {\r\n            start += 250;\r\n            ctx.moveTo(start, -MapConfig.height/2);\r\n            ctx.lineTo(start, MapConfig.height/2);\r\n            ctx.stroke();\r\n        }\r\n        start = -MapConfig.height/2;\r\n        while (start < MapConfig.height/2) {\r\n            start += 250;\r\n            ctx.moveTo(-MapConfig.width/2, start);\r\n            ctx.lineTo(MapConfig.width/2, start);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    genObstacles () {\r\n        for (let i = 0; i < MapConfig.numObs; i++) {\r\n            let node = cc.instantiate(this.bushPrefab);\r\n            this.bg.node.addChild(node);\r\n            this.obstacles.push(node.getComponent(Obstacle));\r\n            node.setPosition(MapConfig.obsPos[i].x, MapConfig.obsPos[i].y);\r\n        }\r\n    }\r\n\r\n    updateMyPlayerPos (x: number, y: number) {\r\n        this.bg.node.x = -x*MapConfig.mapScale;\r\n        this.bg.node.y = -y*MapConfig.mapScale;\r\n    }\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    onDestroy () {\r\n\r\n    }\r\n}","﻿import { Match, Presence, RpcResponse } from \"@heroiclabs/nakama-js\";\r\nimport MultiplayerMessage from \"./MultiplayerMessage\";\r\nimport NakamaManager from \"./NakamaManager\";\r\nimport { eventHandler } from \"../Utils/EventHandler\";\r\nimport RPCs from \"../Utils/RPCs\";\r\nimport { JoinMatchData } from \"./RPCData\";\r\nimport {Code} from \"./OperationCode\";\r\n\r\nexport default class MultiplayerManager {\r\n  static readonly OnLocalTick: string = \"MultiplayerManager.OnLocalTick\";\r\n  static readonly OnMatchLeave: string = \"MultiplayerManager.OnMatchLeave\";\r\n  static readonly OnMatchJoin: string = \"MultiplayerManager.OnMatchJoin\";\r\n\r\n  tickRate: number = 5;\r\n  sendRate: number = 1 / this.tickRate;\r\n  logFormat: string = \"{0} with code {1}:\\n{2}\";\r\n  static readonly SendingDataLog: string = \"Sending data\";\r\n  static readonly ReceivedDataLog: string = \"Received data\";\r\n\r\n  enableLog: boolean = false;\r\n\r\n  // onReceiveData: Map<Code, Action<MultiplayerMessage>> = new Map<\r\n  //   Code,\r\n  //   Action<MultiplayerMessage>\r\n  // >();\r\n  match: Match = null;\r\n\r\n  static instance: MultiplayerManager = null;\r\n  private interval: NodeJS.Timer;\r\n\r\n  self(): Presence {\r\n    return this.match == null ? null : this.match.self;\r\n  }\r\n\r\n  isOnMatch(): boolean {\r\n    return this.match != null;\r\n  }\r\n\r\n  static init() {\r\n    MultiplayerManager.instance = new MultiplayerManager();\r\n    MultiplayerManager.instance.interval = setInterval(MultiplayerManager.instance.localTickPassed, MultiplayerManager.instance.sendRate * 1000);\r\n  }\r\n\r\n  localTickPassed() {\r\n    eventHandler.dispatchEvent(MultiplayerManager.OnLocalTick);\r\n  }\r\n\r\n  async joinMatchAsync() {\r\n    // NakamaManager.instance.socket.ReceivedMatchState -= Receive;\r\n    // NakamaManager.instance.socket.ReceivedMatchState += Receive;\r\n    eventHandler.on(NakamaManager.OnDisconnected, this.disconnected.bind(this));\r\n    cc.log(\"NakamaManager:\", NakamaManager.instance);\r\n    let rpcResult: RpcResponse = await NakamaManager.instance.sendRPC(\r\n      RPCs.JoinOrCreateMatchRpc\r\n    );\r\n    cc.log(\"rpcResult:\", JSON.stringify(rpcResult));\r\n    let result = rpcResult.payload as JoinMatchData;\r\n    let matchId: string = result.matchId;\r\n    cc.log(\"matchId\", matchId);\r\n    this.match = await NakamaManager.instance.socket.joinMatch(matchId);\r\n\r\n    cc.log(\"match:\", this.match);\r\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchJoin);\r\n  }\r\n\r\n  private disconnected() {\r\n    eventHandler.off(NakamaManager.OnDisconnected, this.disconnected);\r\n    // NakamaManager.Instance.Socket.ReceivedMatchState -= Receive;\r\n    this.match = null;\r\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchLeave);\r\n  }\r\n\r\n  public async leaveMatchAsync() {\r\n    eventHandler.off(NakamaManager.OnDisconnected, this.disconnected);\r\n    // NakamaManager.Instance.Socket.ReceivedMatchState -= Receive;\r\n    await NakamaManager.instance.socket.leaveMatch(this.match.match_id);\r\n    this.match = null;\r\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchLeave);\r\n  }\r\n\r\n  public async send(code: Code, data: object | []) {\r\n    if (this.match == null) return;\r\n\r\n    if (this.enableLog) cc.log(MultiplayerManager.SendingDataLog, code, data);\r\n\r\n    await NakamaManager.instance.socket.sendMatchState(\r\n      this.match.match_id,\r\n      code,\r\n      data\r\n    );\r\n  }\r\n\r\n  receive(newState): void {\r\n    if (this.enableLog) {\r\n      let encoder = new TextEncoder();\r\n      const json = encoder.encode(newState.State);\r\n      cc.log(MultiplayerManager.ReceivedDataLog, newState.OpCode, json);\r\n    }\r\n\r\n    // let\r\n    // multiplayerMessage:MultiplayerMessage = new MultiplayerMessage(newState);\r\n    // if (this.onReceiveData.has(multiplayerMessage.dataCode))\r\n    //     onReceiveData[multiplayerMessage.DataCode]?.Invoke(multiplayerMessage);\r\n  }\r\n\r\n  // public\r\n  // subscribe(Code\r\n  // code, Action < MultiplayerMessage > action\r\n  // )\r\n  // {\r\n  //     if (!this.onReceiveData.has(code))\r\n  //         onReceiveData.Add(code, null);\r\n  //\r\n  //     onReceiveData[code] += action;\r\n  // }\r\n  //\r\n  // unsubscribe(code\r\n  // :\r\n  // Code, Action < MultiplayerMessage > action\r\n  // )\r\n  // {\r\n  //     if (this.onReceiveData.has(code))\r\n  //         onReceiveData[code] -= action;\r\n  // }\r\n  //\r\n  // logData(description\r\n  // :\r\n  // string, dataCode\r\n  // :\r\n  // number, json\r\n  // :\r\n  // string\r\n  // )\r\n  // {\r\n  //\r\n  //     console.log(string.Format(LogFormat, description, (Code)\r\n  //     dataCode, json\r\n  // ))\r\n  //     ;\r\n  // }\r\n}\r\n","﻿import { Match } from \"@heroiclabs/nakama-js\";\r\n\r\nexport default class MultiplayerMessage {\r\n  json: string = null;\r\n  bytes = null;\r\n\r\n  dataCode: Code;\r\n  sessionId: string;\r\n  userId: string;\r\n  username: string;\r\n\r\n  public MultiplayerMessage(matchState: any) {\r\n    //TODO:check\r\n    this.dataCode = matchState.opCode as Code;\r\n    if (matchState.UserPresence != null) {\r\n      this.userId = matchState.userPresence.userId;\r\n      this.sessionId = matchState.userPresence.sessionId;\r\n      this.username = matchState.userPresence.username;\r\n    }\r\n\r\n    let encoder = new TextEncoder();\r\n    this.bytes = encoder.encode(matchState.State);\r\n    this.json = this.bytes.toString();\r\n  }\r\n\r\n  getData<T>() {\r\n    // return json.Deserialize<T>();\r\n  }\r\n\r\n  getBytes() {\r\n    return this.bytes;\r\n  }\r\n}\r\n","﻿import NakamaManager from \"./NakamaManager\";\r\nimport NakamaConnectionData from \"./NakamaConnectionData\";\r\nimport { eventHandler } from \"../Utils/EventHandler\";\r\n\r\nexport default class NakamaAutoLogin {\r\n  private retryTime: number = 5;\r\n\r\n  static init() {\r\n    new NakamaAutoLogin().onLoad();\r\n  }\r\n\r\n  async onLoad() {\r\n    cc.log(\"NakamaAutoLogin.start\");\r\n    eventHandler.on(NakamaManager.OnLoginFail, this.loginFailed.bind(this));\r\n    await this.tryLogin();\r\n    eventHandler.on(NakamaManager.OnLoginSuccess, () => {\r\n      cc.log(\"Tien log bat event On Login Success\");\r\n    });\r\n  }\r\n\r\n  onDestroy(): void {\r\n    eventHandler.off(NakamaManager.OnLoginFail, this.loginFailed);\r\n  }\r\n\r\n  async tryLogin() {\r\n    await NakamaManager.instance.loginWithDeviceId();\r\n  }\r\n\r\n  loginFailed() {\r\n    setTimeout(async () => {\r\n      await this.tryLogin();\r\n    }, this.retryTime * 1000);\r\n    // this.schedule(() => {\r\n    //     this.tryLogin();\r\n    // }, this.retryTime);\r\n  }\r\n}\r\n","export default class NakamaConnectionData {\r\n  // scheme: string = null;\r\n  host: string = null;\r\n  port: string = null;\r\n  serverKey: string = null;\r\n\r\n  constructor(\r\n    // scheme?: string,\r\n    host?: string,\r\n    port?: string,\r\n    serverKey?: string\r\n  ) {\r\n    // this.scheme = scheme;\r\n    this.host = host;\r\n    this.port = port;\r\n    this.serverKey = serverKey;\r\n  }\r\n}\r\n","﻿import {Client, Session, Socket} from \"@heroiclabs/nakama-js\";\r\nimport {RpcResponse} from \"@heroiclabs/nakama-js/client\";\r\nimport {v4} from \"uuid\";\r\nimport NakamaConnectionData from \"./NakamaConnectionData\";\r\nimport LocalStorageKeys from \"../Utils/LocalStorageKeys\";\r\nimport {eventHandler} from \"../Utils/EventHandler\";\r\n\r\nexport default class NakamaManager {\r\n    static readonly OnConnecting: string = \"NakamaManager.OnConnecting\";\r\n    static readonly OnConnected: string = \"NakamaManager.OnConnected\";\r\n    static readonly OnDisconnected: string = \"NakamaManager.OnDisconnected\";\r\n    static readonly OnLoginSuccess: string = \"NakamaManager.OnLoginSuccess\";\r\n    static readonly OnLoginFail: string = \"NakamaManager.OnLoginFail\";\r\n\r\n    connectionData: NakamaConnectionData = new NakamaConnectionData(\r\n        \"138.2.95.97\",\r\n        \"7350\",\r\n        \"defaultkey\"\r\n    );\r\n\r\n    client: Client = null;\r\n    session: Session = null;\r\n    socket: Socket = null;\r\n\r\n    static instance: NakamaManager = null;\r\n\r\n    username(): string {\r\n        return this.session == null ? \"\" : this.session.username;\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return this.socket != null; // && this.socket.adapter.isConnected();\r\n    }\r\n\r\n    static init() {\r\n        cc.log(\"NakamaManager::init\");\r\n        NakamaManager.instance = new NakamaManager();\r\n    }\r\n\r\n    onApplicationQuit() {\r\n        if (this.socket != null) this.socket.disconnect(true);\r\n    }\r\n\r\n    loginWithUdid() {\r\n        // let udid = PlayerPrefs.GetString(UdidKey, Guid.NewGuid().ToString());\r\n        // PlayerPrefs.SetString(UdidKey, udid);\r\n        // this.client = new Client(this.connectionData.scheme, this.connectionData.host, this.connectionData.port, this.connectionData.serverKey, UnityWebRequestAdapter.Instance);\r\n        // this.loginAsync(this.connectionData, this.client.authenticateDevice(udid));\r\n    }\r\n\r\n    async loginWithDeviceId() {\r\n        this.client = new Client(\r\n            this.connectionData.serverKey,\r\n            this.connectionData.host,\r\n            this.connectionData.port\r\n        );\r\n\r\n        let deviceId: string = cc.sys.localStorage.getItem(\r\n            LocalStorageKeys.DeviceId\r\n        );\r\n        if (deviceId === null) {\r\n            deviceId = v4();\r\n            cc.sys.localStorage.setItem(LocalStorageKeys.DeviceId, deviceId);\r\n        }\r\n\r\n        await this.loginAsync(\r\n            this.connectionData,\r\n            this.client.authenticateDevice(deviceId)\r\n        );\r\n    }\r\n\r\n    loginWithCustomId(customId: string) {\r\n        this.client = new Client(\r\n            this.connectionData.serverKey,\r\n            this.connectionData.host,\r\n            this.connectionData.port\r\n        );\r\n        this.loginAsync(\r\n            this.connectionData,\r\n            this.client.authenticateCustom(customId)\r\n        );\r\n    }\r\n\r\n    async loginAsync(connectionData, sessionTask: Promise<Session>) {\r\n        eventHandler.dispatchEvent(\r\n            new cc.Event.EventCustom(NakamaManager.OnConnecting, true)\r\n        );\r\n        sessionTask\r\n            .then((session) => {\r\n                this.session = session;\r\n                this.socket = this.client.createSocket(false);\r\n                // this.socket.connected += this.connected;\r\n                // this.socket.closed += Disconnected;\r\n                this.socket.connect(this.session, true);\r\n                eventHandler.dispatchEvent(\r\n                    new cc.Event.EventCustom(NakamaManager.OnLoginSuccess, true)\r\n                );\r\n                cc.log(\"login thanh cong\", this.session, this.client);\r\n            })\r\n            .catch((exception) => {\r\n                cc.error(exception);\r\n                eventHandler.dispatchEvent(\r\n                    new cc.Event.EventCustom(NakamaManager.OnLoginFail, true)\r\n                );\r\n            });\r\n    }\r\n\r\n    logOut() {\r\n        this.socket.disconnect(true);\r\n    }\r\n\r\n    connected() {\r\n        eventHandler.dispatchEvent(\r\n            new cc.Event.EventCustom(NakamaManager.OnConnected, true)\r\n        );\r\n    }\r\n\r\n    disconnected() {\r\n        eventHandler.dispatchEvent(\r\n            new cc.Event.EventCustom(NakamaManager.OnDisconnected, true)\r\n        );\r\n    }\r\n\r\n    async sendRPC(rpc: string, payload: object = {}): Promise<RpcResponse> {\r\n        if (this.client === null || this.session == null) return null;\r\n        return await this.client.rpc(this.session, rpc, payload);\r\n    }\r\n\r\n    onDestroy() {\r\n        cc.log(\"NakamaManager.onDestroy\");\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Obstacle extends cc.Component {\r\n\r\n    r: number = 0;\r\n\r\n    setPosition (x: number, y: number) {\r\n        this.node.setPosition(x, y);\r\n    }\r\n\r\n    checkCollisionCircle (r: number, x:number, y: number): boolean {\r\n        return false;\r\n    }\r\n\r\n    checkCollisionPoint (x:number, y: number): boolean {\r\n        return false;\r\n    }\r\n\r\n    hit () {\r\n        cc.log(\"bullet hit obstacle\");\r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {\r\n    //     cc.resources.load(\"obstacle/obstacle-bush-01\", cc.Texture2D ,(err: any, texture: cc.Texture2D) => {\r\n    //         let spriteFrame = new cc.SpriteFrame();\r\n    //         spriteFrame.setTexture(texture);\r\n    //         let node = new cc.Node();\r\n    //         this.leaf = node.addComponent(cc.Sprite);\r\n    //         this.leaf.spriteFrame = spriteFrame;\r\n    //         this.node.addChild(node, 1);\r\n    //\r\n    //         node.opacity = 110;\r\n    //     });\r\n    //\r\n    //     cc.resources.load(\"obstacle/obstacle-bottle-01\", cc.Texture2D ,(err: any, texture: cc.Texture2D) => {\r\n    //         let spriteFrame = new cc.SpriteFrame();\r\n    //         spriteFrame.setTexture(texture);\r\n    //         let node = new cc.Node();\r\n    //         this.root = node.addComponent(cc.Sprite);\r\n    //         this.root.spriteFrame = spriteFrame;\r\n    //         this.node.addChild(node, 0);\r\n    //     });\r\n    // }\r\n\r\n    // start () {\r\n    //     this.node.scale = 0.7;\r\n    // }\r\n\r\n    // update (dt) {}\r\n}\r\n","export enum Code {\r\n    Players = 0,\r\n    PlayerJoined = 1,\r\n    PlayerInput = 2,\r\n    PlayerWon = 3,\r\n    Draw = 4,\r\n    ChangeScene = 5,\r\n\r\n    // In Match\r\n    PlayerPosition = 101,\r\n    PlayerEquip = 102,\r\n    BulletFire = 103\r\n}\r\n","import ccclass = cc._decorator.ccclass;\r\n\r\n@ccclass\r\nexport default class PersistNode extends cc.Component {\r\n    onLoad() {\r\n        cc.game.addPersistRootNode(this.node);\r\n    }\r\n}\r\n","export class PlayerData {\r\n    public name: string;\r\n    public readonly id: string;\r\n    public colorId: number = 0;\r\n\r\n    private hp: number;\r\n    private nBullets: number;\r\n\r\n    private maxHp = 100;\r\n    private maxBullets = 100;\r\n\r\n    constructor (id?: string) {\r\n        if (id !== undefined) this.id = id;\r\n\r\n        this.hp = this.maxHp;\r\n    }\r\n\r\n    loadBullet () {\r\n        this.nBullets = this.maxBullets;\r\n    }\r\n\r\n    fire () {\r\n        this.nBullets--;\r\n        if (this.nBullets <= 0) this.loadBullet();\r\n        return true;\r\n    }\r\n\r\n    takeDamage (damage: number) {\r\n        this.hp -= damage;\r\n    }\r\n\r\n    heal (hp: number) {\r\n        this.hp += hp;\r\n        if (this.hp > this.maxHp) this.hp = this.maxHp;\r\n    }\r\n\r\n    setHp (hp: number) {\r\n        if (hp < 0) this.hp = 0;\r\n        this.hp = (hp > this.maxHp ? this.maxHp : hp);\r\n    }\r\n\r\n    isDead () {\r\n        return this.hp <= 0;\r\n    }\r\n\r\n    getHpRatio (): number {\r\n        return this.hp/this.maxHp;\r\n    }\r\n}","import {PlayerData} from \"./PlayerData\";\r\n\r\nexport class PlayerLogic {\r\n    private data: PlayerData;\r\n    private x: number;\r\n    private y: number;\r\n    private angle: number;\r\n    private isEquip: boolean;\r\n\r\n    constructor(id?: string) {\r\n        if (id === undefined) this.data = new PlayerData();\r\n        this.data = new PlayerData(id);\r\n    }\r\n\r\n    getId () {\r\n        return this.data.id;\r\n    }\r\n\r\n    setPosition (x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    setRotation (angle: number) {\r\n        this.angle = angle;\r\n    }\r\n\r\n    setEquip (bool: boolean) {\r\n        this.isEquip = bool;\r\n    }\r\n}","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport {PlayerColor} from \"../Game/GameConstants\";\r\nimport MatchScene from \"./MatchScene\";\r\nimport {PlayerData} from \"./Logic/PlayerData\";\r\nimport {MatchManager} from \"./Logic/MatchManager\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    body: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    leftHand: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    rightHand: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    backPack: cc.Node = null;\r\n\r\n    @property(cc.Sprite)\r\n    gun: cc.Sprite = null;\r\n\r\n    public r: number = 28;\r\n\r\n    private bodyColor: cc.Color = PlayerColor.body[0];\r\n    private handColor: cc.Color = PlayerColor.hand[0];\r\n    private backColor: cc.Color = PlayerColor.back[0];\r\n\r\n    private data: PlayerData;\r\n\r\n    public isEquip: boolean = false;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        this.genPlayer();\r\n\r\n        this.data = new PlayerData();\r\n    }\r\n\r\n    genPlayer () {\r\n        let ctx = this.body.getComponent(cc.Graphics);\r\n        ctx.fillColor = this.bodyColor;\r\n        ctx.strokeColor = this.bodyColor;\r\n        ctx.circle(0, 0, 28);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx = this.leftHand.getComponent(cc.Graphics);\r\n        ctx.fillColor = this.handColor;\r\n        ctx.circle(0, 0, 10);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx = this.rightHand.getComponent(cc.Graphics);\r\n        ctx.fillColor = this.handColor;\r\n        ctx.circle(0, 0, 10);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        ctx = this.backPack.getComponent(cc.Graphics);\r\n        ctx.fillColor = this.backColor;\r\n        ctx.circle(0, 0, 27);\r\n        ctx.fill();\r\n        ctx.stroke();\r\n\r\n        this.body.setPosition(0, 0);\r\n        this.leftHand.setPosition(-25, 25);\r\n        this.rightHand.setPosition(25, 25);\r\n        this.backPack.setPosition(0, -10);\r\n\r\n        this.gun.node.setPosition(0, 50);\r\n    }\r\n\r\n    start () {\r\n        this.gun.node.active = false;\r\n    }\r\n\r\n    checkCollisionPoint (x:number, y: number): boolean {\r\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\r\n        return d2 <= this.r*this.r;\r\n    }\r\n\r\n    setEquipGun (bool: boolean) {\r\n        this.isEquip = bool;\r\n        if (bool) this.equipGun();\r\n        else this.unEquipGun();\r\n    }\r\n\r\n    toggleEquipGun () {\r\n        this.isEquip = !this.isEquip;\r\n        if (this.isEquip) this.equipGun();\r\n        else this.unEquipGun();\r\n    }\r\n\r\n    equipGun () {\r\n        this.gun.node.active = true;\r\n        this.leftHand.setPosition(-10, 50);\r\n        this.rightHand.setPosition(10, 35);\r\n    }\r\n\r\n    unEquipGun () {\r\n        this.gun.node.active = false;\r\n        this.leftHand.setPosition(-25, 25);\r\n        this.rightHand.setPosition(25, 25);\r\n    }\r\n\r\n    fire () {\r\n        if (this.isEquip) {\r\n            if (this.data.fire()) {\r\n                let dy = Math.cos(this.node.angle * Math.PI/180) * (this.gun.node.width/2 + this.gun.node.y);\r\n                let dx = - Math.tan(this.node.angle * Math.PI/180) * dy;\r\n                let scene = cc.director.getScene();\r\n                scene.getChildByName(\"Canvas\").getComponent(MatchScene).onFire(this.node.x + dx, this.node.y + dy, this.node.angle);\r\n                MatchManager.getInstance().sendFire(this.node.x + dx, this.node.y + dy, this.node.angle);\r\n            }\r\n        }\r\n        else this.fight();\r\n    }\r\n\r\n    fight () {\r\n        // TODO: anim fight by hand\r\n    }\r\n\r\n    hit (damage: number) {\r\n        cc.log(\"DMM bullet hit player\");\r\n        this.data.takeDamage(damage);\r\n        //TODO: anim hit\r\n\r\n        if (this.data.isDead()) this.died();\r\n    }\r\n\r\n    getHpRatio (): number {\r\n        return this.data.getHpRatio();\r\n    }\r\n\r\n    died () {\r\n        //TODO: anim died\r\n        this.node.removeFromParent();\r\n    }\r\n\r\n    onDestroy () {\r\n        // Cancel keyboard input monitoring\r\n    }\r\n}\r\n","export default class RPCs {\r\n  static readonly JoinOrCreateMatchRpc = \"JoinOrCreateMatchRpc\";\r\n}\r\n","import { eventHandler } from \"../Utils/EventHandler\";\r\nimport NakamaManager from \"../Nakama/NakamaManager\";\r\n\r\nexport default class SceneChanger {\r\n  static instance: SceneChanger;\r\n\r\n  static init() {\r\n    cc.log(\"SceneChanger::init\");\r\n    SceneChanger.instance = new SceneChanger();\r\n    eventHandler.on(\r\n        NakamaManager.OnLoginSuccess,\r\n        SceneChanger.instance.loadHomeScene.bind(this)\r\n    );\r\n  }\r\n\r\n  loadHomeScene() {\r\n    cc.log(\"SceneChanger::loadHomeScene\");\r\n    cc.director.loadScene(\"HomeScene\");\r\n  }\r\n\r\n  loadLobbyScene() {\r\n    cc.log(\"SceneChanger::loadLobbyScene\");\r\n    cc.director.loadScene(\"LobbyScene\");\r\n  }\r\n\r\n  loadMatchScene() {\r\n    cc.log(\"SceneChanger::loadMatchScene\");\r\n    cc.director.loadScene(\"MatchScene\");\r\n  }\r\n}\r\n","export class UserInfo {\r\n    public readonly userId: string;\r\n    public readonly userName: string;\r\n    public level: number;\r\n\r\n    constructor(id?: string) {\r\n        if (id === undefined) this.userId = \"0\";\r\n        else this.userId = id;\r\n    }\r\n}\r\n"],"file":"index.js"}