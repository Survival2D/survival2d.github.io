{"version":3,"sources":["assets/Script/Match/MapObject/Bullet.ts","assets/Script/Match/MapObject/Obstacle/Bush.ts","assets/Script/Utils/EventHandler.ts","assets/Script/Game/GameConstants.ts","assets/Script/Utils/GameEventType.ts","assets/Script/Game/GameManager.ts","assets/Script/Game/HomeScene.ts","assets/Script/Initializer.ts","assets/Script/Utils/LocalStorageKeys.ts","assets/Script/Match/MapObject/LootItem.ts","assets/Script/Match/Logic/MatchManager.ts","assets/Script/Match/Logic/MatchNetwork.ts","assets/Script/Match/MatchScene.ts","assets/Script/Match/MiniMap.ts","assets/Script/Nakama/MultiplayerManager.ts","assets/Script/Nakama/MultiplayerMessage.ts","assets/Script/Nakama/NakamaAutoLogin.ts","assets/Script/Nakama/NakamaConnectionData.ts","assets/Script/Nakama/NakamaManager.ts","assets/Script/Match/MapObject/Obstacle/Obstacle.ts","assets/Script/Nakama/OperationCode.ts","assets/Script/Utils/PersistNode.ts","assets/Script/Match/Logic/PlayerData.ts","assets/Script/Match/Logic/PlayerLogic.ts","assets/Script/Match/Player.ts","assets/Script/Utils/RPCs.ts","assets/Script/General/SceneChanger.ts","assets/Script/Game/UserInfo.ts"],"names":["_a","cc","_decorator","ccclass","property","Bullet","_super","__extends","_this","apply","this","arguments","trail","vx","vy","vel","damage","isHit","prototype","setPosition","x","y","node","setAngle","angle","Math","cos","PI","tan","start","fire","active","scaleX","stopAllActions","tween","to","union","hit","call","isAvailable","updateFly","dt","__decorate","Sprite","Component","exports","default","Obstacle_1","require","Bush","root","leaf","onLoad","r","width","checkCollisionCircle","d2","checkCollisionPoint","EventHandler","eventTarget","EventTarget","on","event","callback","off","dispatchEvent","data","Event","eventCustom","EventCustom","setUserData","eventHandler","PlayerColor","body","color","fromHEX","hand","back","MapConfig","numObs","obsPos","height","mapScale","lootItemId","gun","ammo","chest","helmet","Config","IS_ONLINE","GameEventType","MultiplayerManager_1","EventHandler_1","SceneChanger_1","MatchManager_1","UserInfo_1","NakamaManager_1","GameManager","VictoriesRequiredToWin","playersWins","winner","userInfo","UserInfo","init","instance","OnLoginSuccess","session","user_id","OnMatchJoin","joinedMatch","bind","OnMatchLeave","leavedMatch","onDestroy","log","resetPlayerWins","goToLobby","goToHome","Array","loadHomeScene","MatchManager","getInstance","newMatch","GameConstants_1","HomeScene","buttonPlayNow","avatar","playerName","playerLevel","onPlayNow","string","joinMatchAsync","sent","Button","Label","GameManager_1","NakamaAutoLogin_1","Initializer","resources","preloadDir","SpriteFrame","LocalStorageKeys","DeviceId","LootItem","bg","item","load","err","spriteFrame","setItemId","id","path","MatchScene_1","MatchNetwork_1","OperationCode_1","PlayerLogic_1","matchScene","network","playerLogicsMap","Map","mainPlayerLogic","PlayerLogic","loadMatchScene","MatchNetwork","subscribeListener","setScene","scene","inMatch","onReceiveNewPlayerJoin","pk","userID","createNewPlayer","playerLogic","set","newPlayerJoin","getPlayerLogic","has","get","getMainPlayerLogic","sendUpdatePlayerPos","userId","send","Code","PlayerPosition","onReceivePlayerUpdatePos","updatePlayerPos","setRotation","updateMainPlayerPos","updateMyPlayerPos","sendFire","BulletFire","onReceiveFire","onFire","sendPlayerEquip","isEquip","PlayerEquip","onReceivePlayerEquip","updatePlayerEquip","setEquip","onPlayerEquip","onReceiveDied","onDied","onMainPlayerDied","calculateMovePlayer","newX","newY","mgr","socket","onmatchdata","matchData","onReceivePacket","op_code","code","PlayerJoined","Player_1","Bullet_1","MiniMap_1","LootItem_1","MatchScene","mapZIndex","grid","bullet","player","obs","isUp","isDown","isLeft","isRight","bushPrefab","playerPrefab","bulletPrefab","lootItem","map","mapGrid","camera","hud","miniMapNode","myHpProgress","mainPlayerNode","mainPlayer","playersMap","bullets","obstacles","miniMap","expiredTime","drawMapGrid","ctx","getComponent","Graphics","rect","stroke","genObstacles","playerPosInValid","randX","randY","random","_i","length","genLootItem","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","Node","MOUSE_MOVE","onMouseMove","MOUSE_DOWN","onClick","MOUSE_WHEEL","onScroll","keyCode","macro","KEY","a","s","d","w","f","toggleEquipGun","t","dx","getLocationX","dy","getLocationY","atan","getButton","EventMouse","BUTTON_LEFT","getScrollY","zoomIn","zoomOut","scale","zIndex","moveTo","lineTo","i","instantiate","addChild","push","undefined","invalid","loot","getBullet","bullet_1","setEquipGun","died","delete","update","moveMainPlayer","forEach","e","checkHitPlayer","checkHitObstacle","progress","getHpRatio","Prefab","Layout","ProgressBar","MiniMap","playerColor","fillColor","strokeColor","circle","fill","lineWidth","RPCs_1","MultiplayerManager","tickRate","sendRate","logFormat","enableLog","match","self","isOnMatch","interval","setInterval","localTickPassed","OnLocalTick","OnDisconnected","disconnected","sendRPC","JoinOrCreateMatchRpc","rpcResult","_b","JSON","stringify","result","payload","matchId","joinMatch","leaveMatchAsync","leaveMatch","match_id","SendingDataLog","sendMatchState","receive","newState","encoder","TextEncoder","json","encode","State","ReceivedDataLog","OpCode","MultiplayerMessage","bytes","matchState","dataCode","opCode","UserPresence","userPresence","sessionId","username","toString","getData","getBytes","NakamaAutoLogin","retryTime","OnLoginFail","loginFailed","tryLogin","loginWithDeviceId","setTimeout","__awaiter","NakamaConnectionData","host","port","serverKey","nakama_js_1","uuid_1","NakamaConnectionData_1","LocalStorageKeys_1","NakamaManager","connectionData","client","isLoggedIn","onApplicationQuit","disconnect","loginWithUdid","Client","deviceId","sys","localStorage","getItem","v4","setItem","loginAsync","authenticateDevice","loginWithCustomId","customId","authenticateCustom","sessionTask","OnConnecting","then","createSocket","connect","catch","exception","error","logOut","connected","OnConnected","rpc","Promise","Obstacle","PersistNode","game","addPersistRootNode","PlayerData","colorId","maxHp","maxBullets","hp","loadBullet","nBullets","takeDamage","heal","setHp","isDead","PlayerData_1","getId","bool","Player","leftHand","rightHand","backPack","bodyColor","handColor","backColor","genPlayer","equipGun","unEquipGun","director","getScene","getChildByName","fight","removeFromParent","RPCs","SceneChanger","loadScene","loadLobbyScene"],"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","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Bullet extends cc.Component {\n\n    @property(cc.Sprite)\n    trail: cc.Sprite = null;\n\n    private vx: number = null;\n    private vy: number = null;\n\n    private vel: number = 2000;\n\n    public damage: number = 10;\n\n    public isHit: boolean = false;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    setPosition (x: number, y?: number) {\n        this.node.setPosition(x, y);\n    }\n\n    setAngle (angle) {\n        this.trail.node.angle = angle + 90;\n        this.vy = Math.cos(angle * Math.PI/180) * this.vel;\n        this.vx = -Math.tan(angle * Math.PI/180) * this.vy;\n    }\n\n    start () {\n\n    }\n\n    fire () {\n        this.node.active = true;\n        this.trail.node.active = true;\n        this.isHit = false;\n        this.trail.node.scaleX = 0;\n        this.trail.node.stopAllActions();\n        cc.tween(this.trail.node)\n            .to(0.07, {scaleX: 1})\n            .union()\n            .start()\n    }\n\n    hit () {\n        //TODO: anim hit\n        this.isHit = true;\n        this.trail.node.stopAllActions();\n        cc.tween(this.trail.node)\n            .to(0.05, {scaleX: 0})\n            .call(() => {\n                this.node.active = false;\n                this.trail.node.active = false;\n            })\n            .union()\n            .start()\n    }\n\n    isAvailable () {\n        return !this.node.active;\n    }\n\n    updateFly (dt) {\n        this.node.x += this.vx*dt;\n        this.node.y += this.vy*dt;\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport Obstacle from \"./Obstacle\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Bush extends Obstacle {\n\n    @property(cc.Sprite)\n    root: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    leaf: cc.Sprite = null;\n\n    onLoad () {\n        this.r = this.root.node.width/2;\n    }\n\n    start () {\n\n    }\n\n    checkCollisionCircle (r: number, x:number, y: number): boolean {\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\n        return d2 <= r*r + this.r*this.r + 2*r*this.r;\n    }\n\n    checkCollisionPoint (x:number, y: number): boolean {\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\n        return d2 <= this.r*this.r;\n    }\n\n    // update (dt) {}\n}\n","class EventHandler {\n  private readonly eventTarget: cc.EventTarget = new cc.EventTarget();\n\n  on(event: string, callback: (...params) => void) {\n    this.eventTarget.on(event, callback);\n  }\n\n  off(event: string, callback: (...params) => void) {\n    this.eventTarget.off(event, callback);\n  }\n\n  dispatchEvent(event: string | cc.Event, data?: any) {\n    if (event instanceof cc.Event) this.eventTarget.dispatchEvent(event);\n    else {\n      const eventCustom = new cc.Event.EventCustom(event, true);\n      eventCustom.setUserData(data);\n      this.eventTarget.dispatchEvent(eventCustom);\n    }\n  }\n}\n\nexport var eventHandler = new EventHandler();\n","export class PlayerColor {\n    static body : cc.Color[] = [\n        cc.color().fromHEX(\"#f8c574\"),\n        cc.color().fromHEX(\"#c40000\"),\n        cc.color().fromHEX(\"#bc002d\"),\n        cc.color().fromHEX(\"#1b400c\"),\n        cc.color().fromHEX(\"#990000\"),\n    ]\n    static hand : cc.Color[] = [\n        cc.color().fromHEX(\"#f8c574\"),\n        cc.color().fromHEX(\"#16b900\"),\n        cc.color().fromHEX(\"#FFFFFF\"),\n        cc.color().fromHEX(\"#b5c58b\"),\n        cc.color().fromHEX(\"#4c1111\"),\n    ]\n    static back : cc.Color[] = [\n        cc.color().fromHEX(\"#816537\"),\n        cc.color().fromHEX(\"#059300\"),\n        cc.color().fromHEX(\"#c0a73f\"),\n        cc.color().fromHEX(\"#ab7c29\"),\n        cc.color().fromHEX(\"#ffcc00\"),\n    ]\n}\n\nexport class MapConfig {\n    static numObs: number = 10;\n    static obsPos = [\n        {x: -100, y: 200},\n        {x: -132, y: 2019},\n        {x: 441, y: 15},\n        {x: 607, y: -333},\n        {x: 115, y: -231},\n        {x: 19, y: 449},\n        {x: 1004, y: -876},\n        {x: -2107, y: 1613},\n        {x: -999, y: 1},\n        {x: -12, y: 1313}\n    ]\n    static width: number = 3000;\n    static height: number = 2500;\n    static mapScale: number = 1/10;\n\n    static lootItemId = {\n        gun: 0,\n        ammo: 1,\n        chest: 2,\n        helmet: 3\n    }\n}\n\nexport class Config {\n    public static IS_ONLINE = true;\n}\n","enum GameEventType {\n    CONNECTING = \"connecting\",\n    CONNECTED = \"connected\",\n    DISCONNECTED = \"disconnected\",\n    LOGIN_SUCCESS = \"login_success\",\n    LOGIN_FAIL = \"login_fail\",\n}\n","import { Client } from \"@heroiclabs/nakama-js\";\nimport { RpcResponse } from \"@heroiclabs/nakama-js/client\";\nimport MultiplayerManager from \"../Nakama/MultiplayerManager\";\nimport { eventHandler } from \"../Utils/EventHandler\";\nimport SceneChanger from \"../General/SceneChanger\";\nimport {MatchManager} from \"../Match/Logic/MatchManager\";\nimport {UserInfo} from \"./UserInfo\";\nimport NakamaManager from \"../Nakama/NakamaManager\";\n\nexport default class GameManager {\n  public readonly VictoriesRequiredToWin = 3;\n\n  public static instance: GameManager = null;\n  public playersWins: number[] = [];\n  public winner?: number = 0;\n\n  public userInfo = new UserInfo();\n\n  static init() {\n    GameManager.instance = new GameManager();\n\n    eventHandler.on(\n        NakamaManager.OnLoginSuccess,\n        () => {GameManager.instance.userInfo = new UserInfo(NakamaManager.instance.session.user_id);}\n    );\n\n    // MultiplayerManager.instance.Subscribe(MultiplayerManager.Code.PlayerWon, ReceivedPlayerWonRound);\n    // MultiplayerManager.Instance.Subscribe(MultiplayerManager.Code.Draw, ReceivedDrawRound);\n    // MultiplayerManager.Instance.Subscribe(MultiplayerManager.Code.ChangeScene, ReceivedChangeScene);\n    eventHandler.on(\n        MultiplayerManager.OnMatchJoin,\n        GameManager.instance.joinedMatch.bind(GameManager.instance)\n    );\n    eventHandler.on(\n        MultiplayerManager.OnMatchLeave,\n        GameManager.instance.leavedMatch.bind(GameManager.instance)\n    );\n  }\n\n  onDestroy(): void {\n    // {\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.PlayerWon, ReceivedPlayerWonRound);\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.Draw, ReceivedDrawRound);\n    //     MultiplayerManager.Instance.Unsubscribe(MultiplayerManager.Code.PlayerInput, ReceivedChangeScene);\n    //     MultiplayerManager.Instance.onMatchJoin -= JoinedMatch;\n    //     MultiplayerManager.Instance.onMatchLeave -= LeavedMatch;\n  }\n\n  // receivedPlayerWonRound(message: MultiplayerMessage) {\n  //   // PlayerWonData playerWonData = message.GetData<PlayerWonData>();\n  //   // PlayersWins[playerWonData.PlayerNumber]++;\n  //   // Winner = playerWonData.PlayerNumber;\n  // }\n  //\n  // receivedDrawRound(message: MultiplayerMessage) {\n  //   this.winner = null;\n  // }\n  //\n  // receivedChangeScene(message: MultiplayerMessage) {\n  //   // SceneManager.LoadScene(message.GetData<int>());\n  // }\n\n  joinedMatch() {\n    cc.log(\"GameManager\", this);\n    cc.log(\"instance\", GameManager.instance);\n    this.resetPlayerWins();\n    this.goToLobby();\n  }\n\n  leavedMatch() {\n    this.goToHome();\n  }\n\n  resetPlayerWins() {\n    cc.log(\"ResetPlayerWins\");\n    this.playersWins = new Array(4);\n  }\n\n  goToHome() {\n    SceneChanger.instance.loadHomeScene();\n  }\n\n  goToLobby() {\n    MatchManager.getInstance().newMatch();\n  }\n}\n","import {MatchManager} from \"../Match/Logic/MatchManager\";\nimport MultiplayerManager from \"../Nakama/MultiplayerManager\";\nimport {Config} from \"./GameConstants\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class HomeScene extends cc.Component {\n  @property(cc.Button)\n  buttonPlayNow: cc.Button = null;\n  @property(cc.Sprite)\n  avatar: cc.Sprite = null;\n  @property(cc.Label)\n  playerName: cc.Label = null;\n  @property(cc.Label)\n  playerLevel: cc.Label = null;\n\n  start() {\n    // init logic\n    this.buttonPlayNow.node.on(\"click\", this.onPlayNow, this);\n\n    this.playerName.string = \"Tien No Mo Non\";\n    this.playerLevel.string = \"10\";\n\n    // cc.resources.load(\n    //   \"avatar\",\n    //   cc.Texture2D,\n    //   (err: any, texture: cc.Texture2D) => {\n    //     let spriteFrame = new cc.SpriteFrame();\n    //     spriteFrame.setTexture(texture);\n    //     this.avatar.spriteFrame = spriteFrame;\n    //   }\n    // );\n  }\n\n  async onPlayNow() {\n    if (Config.IS_ONLINE) await MultiplayerManager.instance.joinMatchAsync();\n    else {\n      MatchManager.getInstance().newMatch();\n    }\n  }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport SceneChanger from \"./General/SceneChanger\";\nimport NakamaManager from \"./Nakama/NakamaManager\";\nimport MultiplayerManager from \"./Nakama/MultiplayerManager\";\nimport GameManager from \"./Game/GameManager\";\nimport NakamaAutoLogin from \"./Nakama/NakamaAutoLogin\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Initializer extends cc.Component {\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n        SceneChanger.init();\n        NakamaManager.init();\n        MultiplayerManager.init();\n        GameManager.init();\n        NakamaAutoLogin.init();\n\n        //preload resources\n        cc.resources.preloadDir('loot', cc.SpriteFrame);\n    }\n\n    // update (dt) {}\n}\n","export default class LocalStorageKeys {\n  static readonly DeviceId = \"DeviceId\";\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport {MapConfig} from \"../../Game/GameConstants\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class LootItem extends cc.Component {\n\n    @property(cc.Sprite)\n    bg: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    item: cc.Sprite = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n        cc.resources.load('loot/loot-circle-outer-01', cc.SpriteFrame, (err, spriteFrame: cc.SpriteFrame) => {\n            this.bg.spriteFrame = spriteFrame;\n        });\n    }\n\n    setItemId (id: number) {\n        let path = \"\";\n        switch (id) {\n            case MapConfig.lootItemId.gun:\n                path = \"loot/loot-weapon-ak\";\n                break;\n            case MapConfig.lootItemId.ammo:\n                path = \"loot/loot-weapon-ak\";\n                break;\n            case MapConfig.lootItemId.chest:\n                path = \"loot/loot-chest-01\";\n                break;\n            case MapConfig.lootItemId.helmet:\n                path = \"loot/loot-helmet-01\";\n                break;\n        }\n        cc.resources.load(path, cc.SpriteFrame, (err, spriteFrame: cc.SpriteFrame) => {\n            this.item.spriteFrame = spriteFrame;\n        });\n    }\n\n    // update (dt) {}\n}\n","import MatchScene from \"../MatchScene\";\nimport {BulletFire, NewPlayerJoin, PlayerEquip, PlayerPosition} from \"../../Nakama/RPCData\";\nimport {MatchNetwork} from \"./MatchNetwork\";\nimport {Code} from \"../../Nakama/OperationCode\";\nimport SceneChanger from \"../../General/SceneChanger\";\nimport {PlayerLogic} from \"./PlayerLogic\";\nimport GameManager from \"../../Game/GameManager\";\n\nexport class MatchManager {\n    private static instance: MatchManager;\n\n    public static getInstance () {\n        if (!this.instance) this.instance = new MatchManager();\n        return this.instance;\n    }\n\n    private matchScene: MatchScene = null;\n    private network: MatchNetwork = null;\n\n    private mainPlayerLogic: PlayerLogic;\n    private playerLogicsMap: Map<string, PlayerLogic>;\n\n    private obstacleLogics: [];\n\n    newMatch () {\n        this.playerLogicsMap = new Map<string, PlayerLogic>();\n        this.mainPlayerLogic = new PlayerLogic();\n\n        SceneChanger.instance.loadMatchScene();\n        this.network = new MatchNetwork(this);\n        this.network.subscribeListener();\n    }\n\n    setScene (scene: MatchScene) {\n        this.matchScene = scene;\n    }\n\n    inMatch () {\n        return this.matchScene instanceof MatchScene;\n    }\n\n    onReceiveNewPlayerJoin (pk: NewPlayerJoin) {\n        cc.log(\"NEW PLAYER JOIN, ID: \", pk.userID);\n        this.createNewPlayer(pk.userID);\n    }\n\n    createNewPlayer (id: string) {\n        let playerLogic = new PlayerLogic(id);\n        this.playerLogicsMap.set(id, playerLogic);\n        this.matchScene.newPlayerJoin(id);\n    }\n\n    getPlayerLogic (id: string) {\n        if (!this.playerLogicsMap.has(id)) return null;\n        return this.playerLogicsMap.get(id);\n    }\n\n    getMainPlayerLogic () {\n        return this.mainPlayerLogic;\n    }\n\n    sendUpdatePlayerPos (x: number, y: number, angle: number) {\n        let data: PlayerPosition = {\n            x: x,\n            y: y,\n            angle: angle,\n            userID: GameManager.instance.userInfo.userId\n        }\n        this.network.send(Code.PlayerPosition, data);\n    }\n\n    onReceivePlayerUpdatePos (pk: PlayerPosition) {\n        if (pk.userID === GameManager.instance.userInfo.userId) return;\n        else {\n            this.updatePlayerPos(pk.userID, pk.x, pk.y, pk.angle);\n        }\n    }\n\n    updatePlayerPos (id: string, x: number, y: number, angle: number) {\n        if (!this.playerLogicsMap.has(id)) {\n            this.createNewPlayer(id);\n        }\n        let playerLogic = this.playerLogicsMap.get(id);\n        playerLogic.setPosition(x, y);\n        playerLogic.setRotation(angle);\n        this.matchScene.updatePlayerPos(id, x, y, angle);\n    }\n\n    updateMainPlayerPos (x: number, y: number, angle: number) {\n        this.mainPlayerLogic.setPosition(x, y);\n        this.mainPlayerLogic.setRotation(angle);\n        this.matchScene.updateMyPlayerPos( x, y);\n    }\n\n    sendFire (x: number, y: number, angle: number) {\n        let data: BulletFire = {\n            x: x,\n            y: y,\n            angle: angle,\n            userID: GameManager.instance.userInfo.userId\n        }\n        this.network.send(Code.BulletFire, data);\n    }\n\n    onReceiveFire (pk: BulletFire) {\n        if (pk.userID !== GameManager.instance.userInfo.userId) this.matchScene.onFire(pk.x, pk.y, pk.angle);\n    }\n\n    sendPlayerEquip (isEquip: boolean) {\n        let data: PlayerEquip = {\n            isEquip: isEquip,\n            userID: GameManager.instance.userInfo.userId\n        }\n        this.network.send(Code.PlayerEquip, data);\n    }\n\n    onReceivePlayerEquip (pk: PlayerEquip) {\n        if (pk.userID !== GameManager.instance.userInfo.userId) {\n            this.updatePlayerEquip(pk.userID, pk.isEquip);\n        }\n    }\n\n    updatePlayerEquip (id: string, isEquip: boolean) {\n        if (!this.playerLogicsMap.has(id)) {\n            this.createNewPlayer(id);\n        }\n        this.playerLogicsMap.get(id).setEquip(isEquip);\n        this.matchScene.onPlayerEquip(id, isEquip);\n    }\n\n    onReceiveDied (userId: string) {\n        if (userId !== GameManager.instance.userInfo.userId) this.matchScene.onDied(userId);\n        else {\n            // main player died, end match\n            this.matchScene.onMainPlayerDied();\n        }\n    }\n\n\n    // for calculating input from scene\n\n    calculateMovePlayer (newX: number, newY: number) {\n\n    }\n}","import NakamaManager from \"../../Nakama/NakamaManager\";\nimport MultiplayerManager from \"../../Nakama/MultiplayerManager\";\nimport {MatchManager} from \"./MatchManager\";\nimport {Code} from \"../../Nakama/OperationCode\";\nimport {Config} from \"../../Game/GameConstants\";\n\nexport class MatchNetwork {\n\n    private mgr: MatchManager = null;\n\n    constructor(mgr) {\n        this.mgr = mgr;\n    }\n\n    subscribeListener () {\n        if (!Config.IS_ONLINE) return;\n        NakamaManager.instance.socket.onmatchdata = (matchData) => {\n            // cc.log(\"MatchData:\", matchData);\n            this.onReceivePacket(matchData.op_code, matchData.data);\n        };\n    }\n\n    onReceivePacket (code: Code, data: any) {\n        if (!this.mgr.inMatch()) return;\n        switch (code) {\n            case Code.PlayerJoined: {\n                this.mgr.onReceiveNewPlayerJoin(data);\n                break;\n            }\n            case Code.PlayerPosition: {\n                this.mgr.onReceivePlayerUpdatePos(data);\n                break;\n            }\n            case Code.PlayerEquip: {\n                this.mgr.onReceivePlayerEquip(data);\n                break;\n            }\n            case Code.BulletFire: {\n                this.mgr.onReceiveFire(data);\n                break;\n            }\n            default: break;\n        }\n    }\n\n    async send (code: Code, data: object | []) {\n        if (!Config.IS_ONLINE) return;\n        await MultiplayerManager.instance.send(code, data);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport Obstacle from \"./MapObject/Obstacle/Obstacle\";\nimport Player from \"./Player\";\nimport Bullet from \"./MapObject/Bullet\";\nimport {MatchManager} from \"./Logic/MatchManager\";\nimport {MapConfig} from \"../Game/GameConstants\";\nimport MiniMap from \"./MiniMap\";\nimport LootItem from \"./MapObject/LootItem\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MatchScene extends cc.Component {\n\n    private mapZIndex = {\n        grid: -3,\n        item: -2,\n        bullet: -1,\n        player: 0,\n        obs: 1\n    }\n\n    private isUp: boolean = false;\n    private isDown: boolean = false;\n    private isLeft: boolean = false;\n    private isRight: boolean = false;\n\n    @property\n    vel: number = 200;\n\n    @property(cc.Prefab)\n    private bushPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    private playerPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    bulletPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    lootItem: cc.Prefab = null;\n\n    @property(cc.Node)\n    map: cc.Node = null;\n\n    @property(cc.Node)\n    mapGrid: cc.Node = null;\n\n    @property(cc.Node)\n    camera: cc.Node = null;\n\n    @property(cc.Layout)\n    hud: cc.Layout = null;\n\n    @property(cc.Node)\n    miniMapNode: cc.Node = null;\n\n    @property(cc.ProgressBar)\n    myHpProgress: cc.ProgressBar = null;\n\n    @property(cc.Node)\n    mainPlayerNode: cc.Node = null;\n\n    private mainPlayer: Player = null;\n\n    private playersMap: Map<string, Player> = new Map<string, Player>();\n\n    private bullets: Bullet[] = [];\n\n    private obstacles: Obstacle[] = [];\n\n    private miniMap: MiniMap = null;\n\n    private expiredTime: number = 0;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.map.width = MapConfig.width;\n        this.map.height = MapConfig.height;\n\n        this.drawMapGrid();\n\n        let ctx = this.hud.getComponent(cc.Graphics);\n        ctx.rect(this.miniMapNode.x - this.miniMapNode.width/2, this.miniMapNode.y - this.miniMapNode.height/2, this.miniMapNode.width, this.miniMapNode.height);\n        ctx.stroke();\n\n        this.mainPlayer = this.mainPlayerNode.getComponent(Player);\n\n        this.genObstacles();\n\n        this.miniMap = this.miniMapNode.getComponent(MiniMap);\n        this.miniMap.init(this.bushPrefab);\n    }\n\n    start () {\n        MatchManager.getInstance().setScene(this);\n\n        let playerPosInValid = false, randX, randY;\n        do {\n            playerPosInValid = false;\n            randX = (Math.random() - 0.5) * this.map.width;\n            randY = (Math.random() - 0.5) * this.map.height;\n            for (let obs of this.obstacles) {\n                if (obs.checkCollisionCircle(28, randX, randY)) playerPosInValid = true;\n            }\n        } while (playerPosInValid)\n\n        MatchManager.getInstance().updateMainPlayerPos(randX, randY, 0);\n\n        this.genLootItem(randX + 200, randY + 200);\n\n        MatchManager.getInstance().sendUpdatePlayerPos(this.mainPlayerNode.x, this.mainPlayerNode.y, this.mainPlayerNode.angle);\n\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        this.camera.on(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.camera.on(cc.Node.EventType.MOUSE_DOWN, this.onClick, this);\n        this.camera.on(cc.Node.EventType.MOUSE_WHEEL, this.onScroll, this);\n\n        this.expiredTime = 0;\n    }\n\n    onKeyDown (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.isLeft = true;\n                break;\n            case cc.macro.KEY.s:\n                this.isDown = true;\n                break;\n            case cc.macro.KEY.d:\n                this.isRight = true;\n                break;\n            case cc.macro.KEY.w:\n                this.isUp = true;\n                break;\n            case cc.macro.KEY.f:\n                this.mainPlayer.toggleEquipGun();\n                break;\n            case cc.macro.KEY.t:\n                MatchManager.getInstance().createNewPlayer(\"123\");\n        }\n    }\n\n    onKeyUp (event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n                this.isLeft = false;\n                break;\n            case cc.macro.KEY.s:\n                this.isDown = false;\n                break;\n            case cc.macro.KEY.d:\n                this.isRight = false;\n                break;\n            case cc.macro.KEY.w:\n                this.isUp = false;\n                break;\n        }\n    }\n\n    onMouseMove (event) {\n        let dx = event.getLocationX() - this.camera.width/2;\n        let dy = event.getLocationY() - this.camera.height/2;\n        let angle = Math.atan(-dx/dy) * 180 / Math.PI;\n        if (dy < 0) angle = 180 + angle;\n        this.mainPlayerNode.angle = angle;\n    }\n\n    onClick (event) {\n        switch (event.getButton()) {\n            case cc.Event.EventMouse.BUTTON_LEFT:\n                this.mainPlayer.fire();\n                break;\n        }\n    }\n\n    onScroll (event) {\n        if (event.getScrollY() > 0) {\n            this.zoomIn();\n        }\n        else {\n            this.zoomOut();\n        }\n    }\n\n    zoomOut () {\n        if (this.map.scale < 1/8) return;\n        this.map.scale /= 2;\n    }\n\n    zoomIn () {\n        if (this.map.scale >= 1) return;\n        this.map.scale *= 2;\n    }\n\n    drawMapGrid () {\n        this.mapGrid.zIndex = this.mapZIndex.grid;\n        let ctx = this.mapGrid.getComponent(cc.Graphics);\n        let start = -MapConfig.width/2;\n        while (start < MapConfig.width/2) {\n            start += 250;\n            ctx.moveTo(start, -MapConfig.height/2);\n            ctx.lineTo(start, MapConfig.height/2);\n            ctx.stroke();\n        }\n        start = -MapConfig.height/2;\n        while (start < MapConfig.height/2) {\n            start += 250;\n            ctx.moveTo(-MapConfig.width/2, start);\n            ctx.lineTo(MapConfig.width/2, start);\n            ctx.stroke();\n        }\n    }\n\n    genObstacles () {\n        for (let i = 0; i < MapConfig.numObs; i++) {\n            let node = cc.instantiate(this.bushPrefab);\n            this.map.addChild(node, this.mapZIndex.obs);\n            this.obstacles.push(node.getComponent(Obstacle));\n\n            node.setPosition(MapConfig.obsPos[i].x, MapConfig.obsPos[i].y);\n        }\n    }\n\n    genLootItem (x?: number, y?: number) {\n        let randX, randY;\n        if (x === undefined) {\n            let invalid = false;\n            do {\n                invalid = false;\n                randX = (Math.random() - 0.5) * this.map.width;\n                randY = (Math.random() - 0.5) * this.map.height;\n                for (let obs of this.obstacles) {\n                    if (obs.checkCollisionCircle(28, randX, randY)) invalid = true;\n                }\n            } while (invalid)\n        }\n        else {\n            randX = x;\n            randY = y;\n        }\n        let loot = cc.instantiate(this.lootItem);\n        loot.getComponent(LootItem).setItemId(0);\n        this.map.addChild(loot, this.mapZIndex.item);\n        loot.setPosition(randX, randY);\n    }\n\n    getBullet () {\n        for (let bullet of this.bullets) {\n            if (bullet.isAvailable()) return bullet;\n        }\n\n        let node = cc.instantiate(this.bulletPrefab);\n        this.map.addChild(node, this.mapZIndex.bullet);\n        let bullet = node.getComponent(Bullet);\n        this.bullets.push(bullet);\n\n        return bullet;\n    }\n\n    newPlayerJoin (id: string) {\n        if (this.playersMap.has(id)) return;\n        cc.log(\"Create new player, id:\", id);\n        let player = cc.instantiate(this.playerPrefab);\n        this.map.addChild(player, this.mapZIndex.player);\n        this.playersMap.set(id, player.getComponent(Player));\n    }\n\n    updateMyPlayerPos (x: number, y: number) {\n        this.mainPlayerNode.setPosition(x, y);\n\n        // move camera following player\n        this.camera.x = this.mainPlayerNode.x;\n        this.camera.y = this.mainPlayerNode.y;\n        this.hud.node.x = this.mainPlayerNode.x;\n        this.hud.node.y = this.mainPlayerNode.y;\n\n        this.miniMap.updateMyPlayerPos(x, y);\n    }\n\n    updatePlayerPos (id: string, x: number, y: number, angle: number) {\n        if (!this.playersMap.has(id)) {\n            MatchManager.getInstance().createNewPlayer(id);\n        }\n        this.playersMap.get(id).node.setPosition(x, y);\n        this.playersMap.get(id).node.angle = angle;\n    }\n\n    onFire (x: number, y: number, angle: number) {\n        let bullet = this.getBullet();\n        bullet.setPosition(x, y);\n        bullet.setAngle(angle);\n        bullet.fire();\n    }\n\n    onPlayerEquip (id: string, isEquip: boolean) {\n        if (!this.playersMap.has(id)) {\n            MatchManager.getInstance().createNewPlayer(id);\n        }\n        this.playersMap.get(id).setEquipGun(isEquip);\n    }\n\n    onMainPlayerDied () {\n        //TODO: anim main player died, end match\n        this.mainPlayer.died();\n    }\n\n    onDied (id: string) {\n        if (!this.playersMap.has(id)) return;\n        this.playersMap.get(id).died();\n        this.playersMap.delete(id);\n    }\n\n    update (dt) {\n        this.moveMainPlayer(dt);\n\n        // bullets \"fly\"\n        this.bullets.forEach(e => {\n            if (!e.isHit) {\n                e.updateFly(dt);\n                this.checkHitPlayer(e);\n                this.checkHitObstacle(e);\n            }\n        });\n\n        // gen items\n        if (this.expiredTime >= 2) {\n            this.expiredTime -= 2;\n            this.genLootItem();\n        }\n\n        this.expiredTime += dt;\n    }\n\n    moveMainPlayer (dt) {\n        let newX = this.mainPlayerNode.x, newY = this.mainPlayerNode.y;\n        if (this.isLeft && this.isUp) {\n            newX -= this.vel/1.4 * dt;\n            newY += this.vel/1.4 * dt;\n        }\n        else if (this.isLeft && this.isDown) {\n            newX -= this.vel/1.4 * dt;\n            newY -= this.vel/1.4 * dt;\n        }\n        else if (this.isRight && this.isUp) {\n            newX += this.vel/1.4 * dt;\n            newY += this.vel/1.4 * dt;\n        }\n        else if (this.isRight && this.isDown) {\n            newX += this.vel/1.4 * dt;\n            newY -= this.vel/1.4 * dt;\n        }\n        else if (this.isLeft && this.isRight) {}\n        else if (this.isUp && this.isDown) {}\n        else if (this.isLeft) newX -= this.vel * dt;\n        else if (this.isRight) newX += this.vel * dt;\n        else if (this.isUp) newY += this.vel * dt;\n        else if (this.isDown) newY -= this.vel * dt;\n\n        for (let obs of this.obstacles) {\n            if (obs.checkCollisionCircle(28, newX, newY)) {\n                if (!obs.checkCollisionCircle(28, this.mainPlayerNode.x, newY)) {\n                    newX = this.mainPlayerNode.x;\n                }\n                else if (!obs.checkCollisionCircle(28, newX, this.mainPlayerNode.y)) {\n                    newY = this.mainPlayerNode.y;\n                }\n                else {\n                    return;\n                }\n            }\n        }\n\n        MatchManager.getInstance().sendUpdatePlayerPos(newX, newY, this.mainPlayerNode.angle);\n        MatchManager.getInstance().updateMainPlayerPos(newX, newY, this.mainPlayerNode.angle);\n    }\n\n    checkHitPlayer (bullet: Bullet): boolean {\n        if (this.mainPlayer.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\n            this.mainPlayer.hit(bullet.damage);\n            this.myHpProgress.progress = this.mainPlayer.getHpRatio();\n            bullet.hit();\n            return true;\n        }\n        this.playersMap.forEach(e => {\n            if (e.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\n                e.hit(bullet.damage);\n                bullet.hit();\n                return true;\n            }\n        })\n        return false;\n    }\n\n    checkHitObstacle (bullet: Bullet): boolean {\n        this.obstacles.forEach(e => {\n            if (e.checkCollisionPoint(bullet.node.x, bullet.node.y)) {\n                e.hit();\n                bullet.hit();\n                return true;\n            }\n        })\n        return false;\n    }\n\n    onDestroy () {\n        // Cancel keyboard input monitoring\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        this.camera.off(cc.Node.EventType.MOUSE_MOVE, this.onMouseMove, this);\n        this.camera.off(cc.Node.EventType.MOUSE_DOWN, this.onClick, this);\n        this.camera.off(cc.Node.EventType.MOUSE_WHEEL, this.onScroll, this);\n    }\n}\n","import {MapConfig, PlayerColor} from \"../Game/GameConstants\";\nimport Obstacle from \"./MapObject/Obstacle/Obstacle\";\nimport Player from \"./Player\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class MiniMap extends cc.Component {\n    @property(cc.Sprite)\n    bg: cc.Sprite = null;\n\n    @property(cc.Node)\n    grid: cc.Node = null;\n\n    @property(cc.Node)\n    mainPlayer: cc.Node = null;\n\n    private bushPrefab: cc.Prefab;\n\n    private playerColor: cc.Color = PlayerColor.body[0];\n\n    private obstacles : Obstacle[] = [];\n\n    onLoad () {\n        this.bg.node.width = MapConfig.width;\n        this.bg.node.height = MapConfig.height;\n        this.bg.node.scale = MapConfig.mapScale;\n    }\n\n    init (bushPrefab) {\n        this.drawMapGrid();\n\n        this.bushPrefab = bushPrefab;\n\n        this.genObstacles();\n\n        let ctx = this.mainPlayer.getComponent(cc.Graphics);\n        ctx.fillColor = this.playerColor;\n        ctx.strokeColor = this.playerColor;\n        ctx.circle(0, 0, 28);\n        ctx.fill();\n        ctx.stroke();\n        this.mainPlayer.scale = MapConfig.mapScale * 2;\n    }\n\n    drawMapGrid () {\n        let ctx = this.grid.getComponent(cc.Graphics);\n        ctx.lineWidth /= MapConfig.mapScale;\n        let start = -MapConfig.width/2;\n        while (start < MapConfig.width/2) {\n            start += 250;\n            ctx.moveTo(start, -MapConfig.height/2);\n            ctx.lineTo(start, MapConfig.height/2);\n            ctx.stroke();\n        }\n        start = -MapConfig.height/2;\n        while (start < MapConfig.height/2) {\n            start += 250;\n            ctx.moveTo(-MapConfig.width/2, start);\n            ctx.lineTo(MapConfig.width/2, start);\n            ctx.stroke();\n        }\n    }\n\n    genObstacles () {\n        for (let i = 0; i < MapConfig.numObs; i++) {\n            let node = cc.instantiate(this.bushPrefab);\n            this.bg.node.addChild(node);\n            this.obstacles.push(node.getComponent(Obstacle));\n            node.setPosition(MapConfig.obsPos[i].x, MapConfig.obsPos[i].y);\n        }\n    }\n\n    updateMyPlayerPos (x: number, y: number) {\n        this.bg.node.x = -x*MapConfig.mapScale;\n        this.bg.node.y = -y*MapConfig.mapScale;\n    }\n\n    start () {\n\n    }\n\n    onDestroy () {\n\n    }\n}","﻿import { Match, Presence, RpcResponse } from \"@heroiclabs/nakama-js\";\nimport MultiplayerMessage from \"./MultiplayerMessage\";\nimport NakamaManager from \"./NakamaManager\";\nimport { eventHandler } from \"../Utils/EventHandler\";\nimport RPCs from \"../Utils/RPCs\";\nimport { JoinMatchData } from \"./RPCData\";\nimport {Code} from \"./OperationCode\";\n\nexport default class MultiplayerManager {\n  static readonly OnLocalTick: string = \"MultiplayerManager.OnLocalTick\";\n  static readonly OnMatchLeave: string = \"MultiplayerManager.OnMatchLeave\";\n  static readonly OnMatchJoin: string = \"MultiplayerManager.OnMatchJoin\";\n\n  tickRate: number = 5;\n  sendRate: number = 1 / this.tickRate;\n  logFormat: string = \"{0} with code {1}:\\n{2}\";\n  static readonly SendingDataLog: string = \"Sending data\";\n  static readonly ReceivedDataLog: string = \"Received data\";\n\n  enableLog: boolean = false;\n\n  // onReceiveData: Map<Code, Action<MultiplayerMessage>> = new Map<\n  //   Code,\n  //   Action<MultiplayerMessage>\n  // >();\n  match: Match = null;\n\n  static instance: MultiplayerManager = null;\n  private interval: NodeJS.Timer;\n\n  self(): Presence {\n    return this.match == null ? null : this.match.self;\n  }\n\n  isOnMatch(): boolean {\n    return this.match != null;\n  }\n\n  static init() {\n    MultiplayerManager.instance = new MultiplayerManager();\n    MultiplayerManager.instance.interval = setInterval(MultiplayerManager.instance.localTickPassed, MultiplayerManager.instance.sendRate * 1000);\n  }\n\n  localTickPassed() {\n    eventHandler.dispatchEvent(MultiplayerManager.OnLocalTick);\n  }\n\n  async joinMatchAsync() {\n    // NakamaManager.instance.socket.ReceivedMatchState -= Receive;\n    // NakamaManager.instance.socket.ReceivedMatchState += Receive;\n    eventHandler.on(NakamaManager.OnDisconnected, this.disconnected.bind(this));\n    cc.log(\"NakamaManager:\", NakamaManager.instance);\n    let rpcResult: RpcResponse = await NakamaManager.instance.sendRPC(\n      RPCs.JoinOrCreateMatchRpc\n    );\n    cc.log(\"rpcResult:\", JSON.stringify(rpcResult));\n    let result = rpcResult.payload as JoinMatchData;\n    let matchId: string = result.matchId;\n    cc.log(\"matchId\", matchId);\n    this.match = await NakamaManager.instance.socket.joinMatch(matchId);\n\n    cc.log(\"match:\", this.match);\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchJoin);\n  }\n\n  private disconnected() {\n    eventHandler.off(NakamaManager.OnDisconnected, this.disconnected);\n    // NakamaManager.Instance.Socket.ReceivedMatchState -= Receive;\n    this.match = null;\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchLeave);\n  }\n\n  public async leaveMatchAsync() {\n    eventHandler.off(NakamaManager.OnDisconnected, this.disconnected);\n    // NakamaManager.Instance.Socket.ReceivedMatchState -= Receive;\n    await NakamaManager.instance.socket.leaveMatch(this.match.match_id);\n    this.match = null;\n    eventHandler.dispatchEvent(MultiplayerManager.OnMatchLeave);\n  }\n\n  public async send(code: Code, data: object | []) {\n    if (this.match == null) return;\n\n    if (this.enableLog) cc.log(MultiplayerManager.SendingDataLog, code, data);\n\n    await NakamaManager.instance.socket.sendMatchState(\n      this.match.match_id,\n      code,\n      data\n    );\n  }\n\n  receive(newState): void {\n    if (this.enableLog) {\n      let encoder = new TextEncoder();\n      const json = encoder.encode(newState.State);\n      cc.log(MultiplayerManager.ReceivedDataLog, newState.OpCode, json);\n    }\n\n    // let\n    // multiplayerMessage:MultiplayerMessage = new MultiplayerMessage(newState);\n    // if (this.onReceiveData.has(multiplayerMessage.dataCode))\n    //     onReceiveData[multiplayerMessage.DataCode]?.Invoke(multiplayerMessage);\n  }\n\n  // public\n  // subscribe(Code\n  // code, Action < MultiplayerMessage > action\n  // )\n  // {\n  //     if (!this.onReceiveData.has(code))\n  //         onReceiveData.Add(code, null);\n  //\n  //     onReceiveData[code] += action;\n  // }\n  //\n  // unsubscribe(code\n  // :\n  // Code, Action < MultiplayerMessage > action\n  // )\n  // {\n  //     if (this.onReceiveData.has(code))\n  //         onReceiveData[code] -= action;\n  // }\n  //\n  // logData(description\n  // :\n  // string, dataCode\n  // :\n  // number, json\n  // :\n  // string\n  // )\n  // {\n  //\n  //     console.log(string.Format(LogFormat, description, (Code)\n  //     dataCode, json\n  // ))\n  //     ;\n  // }\n}\n","﻿import { Match } from \"@heroiclabs/nakama-js\";\n\nexport default class MultiplayerMessage {\n  json: string = null;\n  bytes = null;\n\n  dataCode: Code;\n  sessionId: string;\n  userId: string;\n  username: string;\n\n  public MultiplayerMessage(matchState: any) {\n    //TODO:check\n    this.dataCode = matchState.opCode as Code;\n    if (matchState.UserPresence != null) {\n      this.userId = matchState.userPresence.userId;\n      this.sessionId = matchState.userPresence.sessionId;\n      this.username = matchState.userPresence.username;\n    }\n\n    let encoder = new TextEncoder();\n    this.bytes = encoder.encode(matchState.State);\n    this.json = this.bytes.toString();\n  }\n\n  getData<T>() {\n    // return json.Deserialize<T>();\n  }\n\n  getBytes() {\n    return this.bytes;\n  }\n}\n","﻿import NakamaManager from \"./NakamaManager\";\nimport NakamaConnectionData from \"./NakamaConnectionData\";\nimport { eventHandler } from \"../Utils/EventHandler\";\n\nexport default class NakamaAutoLogin {\n  private retryTime: number = 5;\n\n  static init() {\n    new NakamaAutoLogin().onLoad();\n  }\n\n  async onLoad() {\n    cc.log(\"NakamaAutoLogin.start\");\n    eventHandler.on(NakamaManager.OnLoginFail, this.loginFailed.bind(this));\n    await this.tryLogin();\n    eventHandler.on(NakamaManager.OnLoginSuccess, () => {\n      cc.log(\"Tien log bat event On Login Success\");\n    });\n  }\n\n  onDestroy(): void {\n    eventHandler.off(NakamaManager.OnLoginFail, this.loginFailed);\n  }\n\n  async tryLogin() {\n    await NakamaManager.instance.loginWithDeviceId();\n  }\n\n  loginFailed() {\n    setTimeout(async () => {\n      await this.tryLogin();\n    }, this.retryTime * 1000);\n    // this.schedule(() => {\n    //     this.tryLogin();\n    // }, this.retryTime);\n  }\n}\n","export default class NakamaConnectionData {\n  // scheme: string = null;\n  host: string = null;\n  port: string = null;\n  serverKey: string = null;\n\n  constructor(\n    // scheme?: string,\n    host?: string,\n    port?: string,\n    serverKey?: string\n  ) {\n    // this.scheme = scheme;\n    this.host = host;\n    this.port = port;\n    this.serverKey = serverKey;\n  }\n}\n","﻿import {Client, Session, Socket} from \"@heroiclabs/nakama-js\";\nimport {RpcResponse} from \"@heroiclabs/nakama-js/client\";\nimport {v4} from \"uuid\";\nimport NakamaConnectionData from \"./NakamaConnectionData\";\nimport LocalStorageKeys from \"../Utils/LocalStorageKeys\";\nimport {eventHandler} from \"../Utils/EventHandler\";\n\nexport default class NakamaManager {\n    static readonly OnConnecting: string = \"NakamaManager.OnConnecting\";\n    static readonly OnConnected: string = \"NakamaManager.OnConnected\";\n    static readonly OnDisconnected: string = \"NakamaManager.OnDisconnected\";\n    static readonly OnLoginSuccess: string = \"NakamaManager.OnLoginSuccess\";\n    static readonly OnLoginFail: string = \"NakamaManager.OnLoginFail\";\n\n    connectionData: NakamaConnectionData = new NakamaConnectionData(\n        \"152.69.216.149\",\n        \"7350\",\n        \"defaultkey\"\n    );\n\n    client: Client = null;\n    session: Session = null;\n    socket: Socket = null;\n\n    static instance: NakamaManager = null;\n\n    username(): string {\n        return this.session == null ? \"\" : this.session.username;\n    }\n\n    isLoggedIn(): boolean {\n        return this.socket != null; // && this.socket.adapter.isConnected();\n    }\n\n    static init() {\n        cc.log(\"NakamaManager::init\");\n        NakamaManager.instance = new NakamaManager();\n    }\n\n    onApplicationQuit() {\n        if (this.socket != null) this.socket.disconnect(true);\n    }\n\n    loginWithUdid() {\n        // let udid = PlayerPrefs.GetString(UdidKey, Guid.NewGuid().ToString());\n        // PlayerPrefs.SetString(UdidKey, udid);\n        // this.client = new Client(this.connectionData.scheme, this.connectionData.host, this.connectionData.port, this.connectionData.serverKey, UnityWebRequestAdapter.Instance);\n        // this.loginAsync(this.connectionData, this.client.authenticateDevice(udid));\n    }\n\n    async loginWithDeviceId() {\n        this.client = new Client(\n            this.connectionData.serverKey,\n            this.connectionData.host,\n            this.connectionData.port\n        );\n\n        let deviceId: string = cc.sys.localStorage.getItem(\n            LocalStorageKeys.DeviceId\n        );\n        if (deviceId === null) {\n            deviceId = v4();\n            cc.sys.localStorage.setItem(LocalStorageKeys.DeviceId, deviceId);\n        }\n\n        await this.loginAsync(\n            this.connectionData,\n            this.client.authenticateDevice(deviceId)\n        );\n    }\n\n    loginWithCustomId(customId: string) {\n        this.client = new Client(\n            this.connectionData.serverKey,\n            this.connectionData.host,\n            this.connectionData.port\n        );\n        this.loginAsync(\n            this.connectionData,\n            this.client.authenticateCustom(customId)\n        );\n    }\n\n    async loginAsync(connectionData, sessionTask: Promise<Session>) {\n        eventHandler.dispatchEvent(\n            new cc.Event.EventCustom(NakamaManager.OnConnecting, true)\n        );\n        sessionTask\n            .then((session) => {\n                this.session = session;\n                this.socket = this.client.createSocket(false);\n                // this.socket.connected += this.connected;\n                // this.socket.closed += Disconnected;\n                this.socket.connect(this.session, true);\n                eventHandler.dispatchEvent(\n                    new cc.Event.EventCustom(NakamaManager.OnLoginSuccess, true)\n                );\n                cc.log(\"login thanh cong\", this.session, this.client);\n            })\n            .catch((exception) => {\n                cc.error(exception);\n                eventHandler.dispatchEvent(\n                    new cc.Event.EventCustom(NakamaManager.OnLoginFail, true)\n                );\n            });\n    }\n\n    logOut() {\n        this.socket.disconnect(true);\n    }\n\n    connected() {\n        eventHandler.dispatchEvent(\n            new cc.Event.EventCustom(NakamaManager.OnConnected, true)\n        );\n    }\n\n    disconnected() {\n        eventHandler.dispatchEvent(\n            new cc.Event.EventCustom(NakamaManager.OnDisconnected, true)\n        );\n    }\n\n    async sendRPC(rpc: string, payload: object = {}): Promise<RpcResponse> {\n        if (this.client === null || this.session == null) return null;\n        return await this.client.rpc(this.session, rpc, payload);\n    }\n\n    onDestroy() {\n        cc.log(\"NakamaManager.onDestroy\");\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Obstacle extends cc.Component {\n\n    r: number = 0;\n\n    setPosition (x: number, y: number) {\n        this.node.setPosition(x, y);\n    }\n\n    checkCollisionCircle (r: number, x:number, y: number): boolean {\n        return false;\n    }\n\n    checkCollisionPoint (x:number, y: number): boolean {\n        return false;\n    }\n\n    hit () {\n        cc.log(\"bullet hit obstacle\");\n    }\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {\n    //     cc.resources.load(\"obstacle/obstacle-bush-01\", cc.Texture2D ,(err: any, texture: cc.Texture2D) => {\n    //         let spriteFrame = new cc.SpriteFrame();\n    //         spriteFrame.setTexture(texture);\n    //         let node = new cc.Node();\n    //         this.leaf = node.addComponent(cc.Sprite);\n    //         this.leaf.spriteFrame = spriteFrame;\n    //         this.node.addChild(node, 1);\n    //\n    //         node.opacity = 110;\n    //     });\n    //\n    //     cc.resources.load(\"obstacle/obstacle-bottle-01\", cc.Texture2D ,(err: any, texture: cc.Texture2D) => {\n    //         let spriteFrame = new cc.SpriteFrame();\n    //         spriteFrame.setTexture(texture);\n    //         let node = new cc.Node();\n    //         this.root = node.addComponent(cc.Sprite);\n    //         this.root.spriteFrame = spriteFrame;\n    //         this.node.addChild(node, 0);\n    //     });\n    // }\n\n    // start () {\n    //     this.node.scale = 0.7;\n    // }\n\n    // update (dt) {}\n}\n","export enum Code {\n    Players = 0,\n    PlayerJoined = 1,\n    PlayerInput = 2,\n    PlayerWon = 3,\n    Draw = 4,\n    ChangeScene = 5,\n\n    // In Match\n    PlayerPosition = 101,\n    PlayerEquip = 102,\n    BulletFire = 103\n}\n","import ccclass = cc._decorator.ccclass;\n\n@ccclass\nexport default class PersistNode extends cc.Component {\n    onLoad() {\n        cc.game.addPersistRootNode(this.node);\n    }\n}\n","export class PlayerData {\n    public name: string;\n    public readonly id: string;\n    public colorId: number = 0;\n\n    private hp: number;\n    private nBullets: number;\n\n    private maxHp = 100;\n    private maxBullets = 100;\n\n    constructor (id?: string) {\n        if (id !== undefined) this.id = id;\n\n        this.hp = this.maxHp;\n    }\n\n    loadBullet () {\n        this.nBullets = this.maxBullets;\n    }\n\n    fire () {\n        this.nBullets--;\n        if (this.nBullets <= 0) this.loadBullet();\n        return true;\n    }\n\n    takeDamage (damage: number) {\n        this.hp -= damage;\n    }\n\n    heal (hp: number) {\n        this.hp += hp;\n        if (this.hp > this.maxHp) this.hp = this.maxHp;\n    }\n\n    setHp (hp: number) {\n        if (hp < 0) this.hp = 0;\n        this.hp = (hp > this.maxHp ? this.maxHp : hp);\n    }\n\n    isDead () {\n        return this.hp <= 0;\n    }\n\n    getHpRatio (): number {\n        return this.hp/this.maxHp;\n    }\n}","import {PlayerData} from \"./PlayerData\";\n\nexport class PlayerLogic {\n    private data: PlayerData;\n    private x: number;\n    private y: number;\n    private angle: number;\n    private isEquip: boolean;\n\n    constructor(id?: string) {\n        if (id === undefined) this.data = new PlayerData();\n        this.data = new PlayerData(id);\n    }\n\n    getId () {\n        return this.data.id;\n    }\n\n    setPosition (x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    setRotation (angle: number) {\n        this.angle = angle;\n    }\n\n    setEquip (bool: boolean) {\n        this.isEquip = bool;\n    }\n}","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport {PlayerColor} from \"../Game/GameConstants\";\nimport MatchScene from \"./MatchScene\";\nimport {PlayerData} from \"./Logic/PlayerData\";\nimport {MatchManager} from \"./Logic/MatchManager\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Player extends cc.Component {\n\n    @property(cc.Node)\n    body: cc.Node = null;\n\n    @property(cc.Node)\n    leftHand: cc.Node = null;\n\n    @property(cc.Node)\n    rightHand: cc.Node = null;\n\n    @property(cc.Node)\n    backPack: cc.Node = null;\n\n    @property(cc.Sprite)\n    gun: cc.Sprite = null;\n\n    public r: number = 28;\n\n    private bodyColor: cc.Color = PlayerColor.body[0];\n    private handColor: cc.Color = PlayerColor.hand[0];\n    private backColor: cc.Color = PlayerColor.back[0];\n\n    private data: PlayerData;\n\n    public isEquip: boolean = false;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.genPlayer();\n\n        this.data = new PlayerData();\n    }\n\n    genPlayer () {\n        let ctx = this.body.getComponent(cc.Graphics);\n        ctx.fillColor = this.bodyColor;\n        ctx.strokeColor = this.bodyColor;\n        ctx.circle(0, 0, 28);\n        ctx.fill();\n        ctx.stroke();\n\n        ctx = this.leftHand.getComponent(cc.Graphics);\n        ctx.fillColor = this.handColor;\n        ctx.circle(0, 0, 10);\n        ctx.fill();\n        ctx.stroke();\n\n        ctx = this.rightHand.getComponent(cc.Graphics);\n        ctx.fillColor = this.handColor;\n        ctx.circle(0, 0, 10);\n        ctx.fill();\n        ctx.stroke();\n\n        ctx = this.backPack.getComponent(cc.Graphics);\n        ctx.fillColor = this.backColor;\n        ctx.circle(0, 0, 27);\n        ctx.fill();\n        ctx.stroke();\n\n        this.body.setPosition(0, 0);\n        this.leftHand.setPosition(-25, 25);\n        this.rightHand.setPosition(25, 25);\n        this.backPack.setPosition(0, -10);\n\n        this.gun.node.setPosition(0, 50);\n    }\n\n    start () {\n        this.gun.node.active = false;\n    }\n\n    checkCollisionPoint (x:number, y: number): boolean {\n        let d2 = (this.node.x - x)*(this.node.x - x) + (this.node.y - y)*(this.node.y - y);\n        return d2 <= this.r*this.r;\n    }\n\n    setEquipGun (bool: boolean) {\n        this.isEquip = bool;\n        if (bool) this.equipGun();\n        else this.unEquipGun();\n    }\n\n    toggleEquipGun () {\n        this.isEquip = !this.isEquip;\n        if (this.isEquip) this.equipGun();\n        else this.unEquipGun();\n        MatchManager.getInstance().sendPlayerEquip(this.isEquip);\n    }\n\n    equipGun () {\n        this.gun.node.active = true;\n        this.leftHand.setPosition(-10, 50);\n        this.rightHand.setPosition(10, 35);\n    }\n\n    unEquipGun () {\n        this.gun.node.active = false;\n        this.leftHand.setPosition(-25, 25);\n        this.rightHand.setPosition(25, 25);\n    }\n\n    fire () {\n        if (this.isEquip) {\n            if (this.data.fire()) {\n                let dy = Math.cos(this.node.angle * Math.PI/180) * (this.gun.node.width/2 + this.gun.node.y);\n                let dx = - Math.tan(this.node.angle * Math.PI/180) * dy;\n                let scene = cc.director.getScene();\n                scene.getChildByName(\"Canvas\").getComponent(MatchScene).onFire(this.node.x + dx, this.node.y + dy, this.node.angle);\n                MatchManager.getInstance().sendFire(this.node.x + dx, this.node.y + dy, this.node.angle);\n            }\n        }\n        else this.fight();\n    }\n\n    fight () {\n        // TODO: anim fight by hand\n    }\n\n    hit (damage: number) {\n        cc.log(\"DMM bullet hit player\");\n        this.data.takeDamage(damage);\n        //TODO: anim hit\n\n        if (this.data.isDead()) this.died();\n    }\n\n    getHpRatio (): number {\n        return this.data.getHpRatio();\n    }\n\n    died () {\n        //TODO: anim died\n        this.node.removeFromParent();\n    }\n\n    onDestroy () {\n        // Cancel keyboard input monitoring\n    }\n}\n","export default class RPCs {\n  static readonly JoinOrCreateMatchRpc = \"JoinOrCreateMatchRpc\";\n}\n","import { eventHandler } from \"../Utils/EventHandler\";\nimport NakamaManager from \"../Nakama/NakamaManager\";\n\nexport default class SceneChanger {\n  static instance: SceneChanger;\n\n  static init() {\n    cc.log(\"SceneChanger::init\");\n    SceneChanger.instance = new SceneChanger();\n    eventHandler.on(\n        NakamaManager.OnLoginSuccess,\n        SceneChanger.instance.loadHomeScene.bind(this)\n    );\n  }\n\n  loadHomeScene() {\n    cc.log(\"SceneChanger::loadHomeScene\");\n    cc.director.loadScene(\"HomeScene\");\n  }\n\n  loadLobbyScene() {\n    cc.log(\"SceneChanger::loadLobbyScene\");\n    cc.director.loadScene(\"LobbyScene\");\n  }\n\n  loadMatchScene() {\n    cc.log(\"SceneChanger::loadMatchScene\");\n    cc.director.loadScene(\"MatchScene\");\n  }\n}\n","export class UserInfo {\n    public readonly userId: string;\n    public readonly userName: string;\n    public level: number;\n\n    constructor(id?: string) {\n        if (id === undefined) this.userId = \"0\";\n        else this.userId = id;\n    }\n}\n"],"file":"index.js"}